/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Form;

import DB.DAC.DACSentence;
import DB.DAC.DACSentenceConcept;
import DataProcessing.ConceptExtractor;
import Utility.CapturedConceptStructure;
import Utility.OntologyInterface;
import Stanford.StanfordParser;
import Stanford.StanfordTagger;
import Utility.Globals;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.nio.file.Path;
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.semanticweb.owlapi.model.OWLOntologyCreationException;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 *
 * @author Mohammad Fasha
 */
public class InformationExctration extends javax.swing.JInternalFrame {

    private final DefaultListModel dmjListTextLine, dmjlistSentenceExpandedPOS, dmjlistSentenceREReadyPOS, dmjListParse;
    DefaultTableModel DMAutoIE;
    DefaultTableModel DMManuallyExtractedConcepts;
    DefaultTableModel DMStatisticalResults;
    OntologyInterface OntologyInterface;
    String OntologyPath, OntologyFile;

    class GridDataModelStructure {

        public int SequenceId_Index;
        public int LineNumber_Index;
        public int Arg1Class_Index;
        public int Arg1Value_Index;
        public int ClassOrRelationConceptId_Index;
        public int Arg2Class_Index;
        public int Arg2Value_Index;
        public int DLValidated_Index;
        public int Arg1Stemmed_Index;
        public int Arg2Stemmed_Index;
        public int Arg1Buckwalter_Index;
        public int Arg2Buckwalter_Index;
        public int PatternId_Index;

        public GridDataModelStructure() {
            DMAutoIE = new DefaultTableModel();

            SequenceId_Index = 0;
            DMAutoIE.addColumn("#");
            LineNumber_Index = 1;
            DMAutoIE.addColumn("Line Number");
            Arg1Class_Index = 2;
            DMAutoIE.addColumn("Arg1 Class");
            Arg1Value_Index = 3;
            DMAutoIE.addColumn("Arg1 Value");
            ClassOrRelationConceptId_Index = 4;
            DMAutoIE.addColumn("Concept Id");
            Arg2Class_Index = 5;
            DMAutoIE.addColumn("Arg2 Class");
            Arg2Value_Index = 6;
            DMAutoIE.addColumn("Arg2 Value");
            DLValidated_Index = 7;
            DMAutoIE.addColumn("DL Validated");
            Arg1Stemmed_Index = 8;
            DMAutoIE.addColumn("Arg1 Stemmed");
            Arg2Stemmed_Index = 9;
            DMAutoIE.addColumn("Arg2 Stemmed");
            Arg1Buckwalter_Index = 10;
            DMAutoIE.addColumn("Arg1 Buckwalter");
            Arg2Buckwalter_Index = 11;
            DMAutoIE.addColumn("Arg2 Buckwalter");
            PatternId_Index = 12;
            DMAutoIE.addColumn("Pattern Id");
        }
    }

    GridDataModelStructure GridDM;

    public InformationExctration() {
        initComponents();

        dmjListTextLine = new DefaultListModel();
        dmjlistSentenceExpandedPOS = new DefaultListModel();
        dmjlistSentenceREReadyPOS = new DefaultListModel();
        dmjListParse = new DefaultListModel();

        GridDM = new GridDataModelStructure();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelSentenceText = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jListSentenceText = new javax.swing.JList<>();
        jPanelExpandedPOS = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListSentenceExpandedPOS = new javax.swing.JList<>();
        jPanelREReadyPOS = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jListSentenceREReadyPOS = new javax.swing.JList<>();
        jPanelParseTree = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListCorrectedParseTree = new javax.swing.JList<>();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableManuallyExtractedConcepts = new javax.swing.JTable();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableAutomaticallyExtractedConcepts = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTableAssertedAxioms = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTableStatisticalResults = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuTools = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuSelectOntology = new javax.swing.JMenuItem();
        jMenuItemExctractConcepts = new javax.swing.JMenuItem();
        jMenuItemCreateABox = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemLoadFromTextFile = new javax.swing.JMenuItem();

        setClosable(true);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jScrollPane8.setViewportView(jListSentenceText);

        javax.swing.GroupLayout jPanelSentenceTextLayout = new javax.swing.GroupLayout(jPanelSentenceText);
        jPanelSentenceText.setLayout(jPanelSentenceTextLayout);
        jPanelSentenceTextLayout.setHorizontalGroup(
            jPanelSentenceTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE)
        );
        jPanelSentenceTextLayout.setVerticalGroup(
            jPanelSentenceTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Sentence Text", jPanelSentenceText);

        jScrollPane4.setViewportView(jListSentenceExpandedPOS);

        javax.swing.GroupLayout jPanelExpandedPOSLayout = new javax.swing.GroupLayout(jPanelExpandedPOS);
        jPanelExpandedPOS.setLayout(jPanelExpandedPOSLayout);
        jPanelExpandedPOSLayout.setHorizontalGroup(
            jPanelExpandedPOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 524, Short.MAX_VALUE)
            .addGroup(jPanelExpandedPOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE))
        );
        jPanelExpandedPOSLayout.setVerticalGroup(
            jPanelExpandedPOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 245, Short.MAX_VALUE)
            .addGroup(jPanelExpandedPOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("POS", jPanelExpandedPOS);

        jScrollPane9.setViewportView(jListSentenceREReadyPOS);

        javax.swing.GroupLayout jPanelREReadyPOSLayout = new javax.swing.GroupLayout(jPanelREReadyPOS);
        jPanelREReadyPOS.setLayout(jPanelREReadyPOSLayout);
        jPanelREReadyPOSLayout.setHorizontalGroup(
            jPanelREReadyPOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 524, Short.MAX_VALUE)
            .addGroup(jPanelREReadyPOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE))
        );
        jPanelREReadyPOSLayout.setVerticalGroup(
            jPanelREReadyPOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 245, Short.MAX_VALUE)
            .addGroup(jPanelREReadyPOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Regular Expression Ready POS", jPanelREReadyPOS);

        jScrollPane5.setViewportView(jListCorrectedParseTree);

        javax.swing.GroupLayout jPanelParseTreeLayout = new javax.swing.GroupLayout(jPanelParseTree);
        jPanelParseTree.setLayout(jPanelParseTreeLayout);
        jPanelParseTreeLayout.setHorizontalGroup(
            jPanelParseTreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 524, Short.MAX_VALUE)
            .addGroup(jPanelParseTreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelParseTreeLayout.createSequentialGroup()
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanelParseTreeLayout.setVerticalGroup(
            jPanelParseTreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 245, Short.MAX_VALUE)
            .addGroup(jPanelParseTreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Corrected Parse Tree", jPanelParseTree);

        jLabel6.setText("Manually Extracted Concepts");

        jTableManuallyExtractedConcepts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Sentence Id", "Concept Id", "Arg 1 Class", "Arg 1  Value", "Arg 2 Class", "Arg 2 Value", "Match Level"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTableManuallyExtractedConcepts);

        jTabbedPane2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTableAutomaticallyExtractedConcepts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Sentence Id", "Arg 1 Concept Id", "Arg 1 Value", "Concept Id", "Arg 2 Concept Id", "Arg 2 Value", "DL Validated", "Arg 1 Stemmed", "Arg 2 Stemmed", "POS", "Expanded POS", "Semantic POS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAutomaticallyExtractedConcepts.setColumnSelectionAllowed(true);
        jScrollPane3.setViewportView(jTableAutomaticallyExtractedConcepts);
        jTableAutomaticallyExtractedConcepts.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("General", jPanel4);

        jTableAssertedAxioms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Concept Id", "Arg 1 Concept Id", "Arg 1 Value", "Arg 2 Concept Id", "Arg 2 Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(jTableAssertedAxioms);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 1185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Asserted Axioms", jPanel5);

        jTableStatisticalResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Concept Id", "TP", "FP", "FN", "Precision", "Recall"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane10.setViewportView(jTableStatisticalResults);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 1185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Extraction Results", jPanel1);

        jLabel5.setText("Automatically Extracted Concepts");

        jMenuTools.setText("Tools");
        jMenuTools.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuToolsActionPerformed(evt);
            }
        });

        jMenuItem1.setText("1- Load Annotated Story From DB");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuTools.add(jMenuItem1);

        jMenuSelectOntology.setText("2- Select Ontology");
        jMenuSelectOntology.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSelectOntologyActionPerformed(evt);
            }
        });
        jMenuTools.add(jMenuSelectOntology);

        jMenuItemExctractConcepts.setText("3- Extract Concepts using Regex");
        jMenuItemExctractConcepts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExctractConceptsActionPerformed(evt);
            }
        });
        jMenuTools.add(jMenuItemExctractConcepts);

        jMenuItemCreateABox.setText("4- Create A-Box Axioms");
        jMenuItemCreateABox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCreateABoxActionPerformed(evt);
            }
        });
        jMenuTools.add(jMenuItemCreateABox);

        jMenuItem3.setText("5- Infer New Concepts");
        jMenuTools.add(jMenuItem3);
        jMenuTools.add(jSeparator1);

        jMenuItemLoadFromTextFile.setText("Load Story from Text File");
        jMenuItemLoadFromTextFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLoadFromTextFileActionPerformed(evt);
            }
        });
        jMenuTools.add(jMenuItemLoadFromTextFile);

        jMenuBar1.add(jMenuTools);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(10, 15, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(10, 10, 10)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(5, 5, 5)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(287, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 3, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 368, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            JFrame frame = new JFrame("Specific Story Id...");
            String storyId = JOptionPane.showInputDialog(frame, "Please enter story id...");

            if (storyId == null) {
                return;
            }

            LoadStorySentencesFromDB(storyId);
            LoadManuallyExtractedConcepts(storyId);

        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(InformationExctration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private Path CopyOntology() {
        try {
            //create a copy of ontology file
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH_mm_ss");
            LocalDateTime now = LocalDateTime.now();
            String destinationFile = Globals.OntologyDefaultDirectory + dtf.format(now) + ".owl";

            Path source, destination;
            source = new java.io.File(OntologyInterface.OntologyFile).toPath();
            destination = new java.io.File(destinationFile).toPath();

            java.nio.file.Files.copy(
                    source,
                    destination,
                    REPLACE_EXISTING);
            return destination;
        } catch (IOException ex) {
            Logger.getLogger(InformationExctration.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }
    private void jMenuItemExctractConceptsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExctractConceptsActionPerformed

        try {
            //Clear DMAutoIE data model
            if (DMAutoIE.getRowCount() > 0) {
                for (int i = DMAutoIE.getRowCount() - 1; i > -1; i--) {
                    DMAutoIE.removeRow(i);
                }
            }

            //Create a new ConceptExtracter class
            ConceptExtractor conceptExtractor = new ConceptExtractor(OntologyInterface);

            //Create an array reference to host matched concepts
            List<CapturedConceptStructure> conceptArray;

            int seqNumber = 1;

            //Iterate story line by line
            for (int i = 0; i < dmjListTextLine.getSize(); i++) {

                //extract all concepts in sentence using the POS scheme
                conceptArray
                        = conceptExtractor.ExtractAllFromSentenceByOrder((String) dmjListTextLine.elementAt(i), (String) dmjlistSentenceREReadyPOS.elementAt(i), i + 1);

                //Iterate through all matched concepts
                for (int ii = 0; ii < conceptArray.size(); ii++) {

                    //First, intoregate the ontology looking for specific concepts types using Arabic stem
                    //If found then use it, otherwise, try to find a specific concept using the exact Arabic word
                    //If found then use it, otherwise just keep the original concept id that was initially identified by the concept pattern 
                    String owlClassOne = OntologyInterface.getClassNameByAnnotationValue(conceptArray.get(ii).ArgumentOneValueStemmed);
                    if (owlClassOne == null) {
                        owlClassOne = OntologyInterface.getClassNameByAnnotationValue(conceptArray.get(ii).ArgumentOneValue);
                    }
                    //if is still null and not found in ontology then use original concept id
                    if (owlClassOne == null) {
                        owlClassOne = conceptArray.get(ii).ArgumentOneClass;
                    }

                    //do the same for argument 2, only if this is a binary relation
                    String owlClassTwo = conceptArray.get(ii).ArgumentTwoClass;;
                    if (conceptArray.get(ii).ArgumentTwoValue != null) {
                        owlClassTwo = OntologyInterface.getClassNameByAnnotationValue(conceptArray.get(ii).ArgumentTwoValueStemmed);
                        if (owlClassTwo == null) {
                            owlClassTwo = OntologyInterface.getClassNameByAnnotationValue(conceptArray.get(ii).ArgumentTwoValue);
                        }
                        //if is still null and not found in ontology then use original concept id
                        if (owlClassTwo == null) {
                            owlClassTwo = conceptArray.get(ii).ArgumentTwoClass;;
                        }
                    }

                    //check if this concept is already included in the table
                    //if so, just update the designated field i.e. POS
                    //otherwise, insert a new row
                    //int rowIndex = FindTableRow(i + 1, conceptArray.get(ii).ConceptId, conceptArray.get(ii).ArgumentOneClass, conceptArray.get(ii).ArgumentOneValue, conceptArray.get(ii).ArgumentTwoClass, conceptArray.get(ii).ArgumentTwoValue);
                    //if (rowIndex == -1) {//-1 ==> not found ==> add new row
                    Object[] data = {seqNumber++,
                        conceptArray.get(ii).LineNumber,
                        owlClassOne,//use instead of conceptArray.get(ii).ArgumentOneClass,
                        conceptArray.get(ii).ArgumentOneValue,
                        conceptArray.get(ii).ConceptId,
                        owlClassTwo, //use instead of conceptArray.get(ii).ArgumentTwoClass,
                        conceptArray.get(ii).ArgumentTwoValue,
                        conceptArray.get(ii).ConceptIdValidated,
                        conceptArray.get(ii).ArgumentOneValueStemmed,
                        conceptArray.get(ii).ArgumentTwoValueStemmed,
                        conceptArray.get(ii).ArgumentOneValueBuckwalter,
                        conceptArray.get(ii).ArgumentTwoValueBuckwalter,
                        conceptArray.get(ii).PatternId};
                    DMAutoIE.addRow(data);

                    //} else {
                    //Just update the designated column to Yes, in our case its in column 6 which is the POS matching result
                    //   DMAutoIE.setValueAt("Match :  " + conceptArray.get(ii).PatternId, rowIndex, 6);
                    //  }
                }
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(InformationExctration.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex.toString());
        } catch (Exception ex) {
            Logger.getLogger(InformationExctration.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex.toString());
        }

        jTableAutomaticallyExtractedConcepts.setModel(DMAutoIE);
        RecalculateStatistics();
    }//GEN-LAST:event_jMenuItemExctractConceptsActionPerformed

    private void jMenuItemCreateABoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCreateABoxActionPerformed
        try {
            String classOrRelationConceptId = null;
            String arg1ConceptId = null;
            String arg1Value = null;
            String arg2ConceptId = null;
            String arg2Value = null;
            String arg1Buckwalter = null;
            String arg2Buckwalter = null;

            String pathStr = CopyOntology().toString();
            OntologyInterface io = new OntologyInterface(pathStr);

            System.out.println("Number of concepts and relations: " + DMAutoIE.getRowCount());

            //iterate over all rows of the extracted concepts grid
            for (int i = 0; i < DMAutoIE.getRowCount(); i++) {

                classOrRelationConceptId = null;
                arg1ConceptId = null;
                arg1Value = null;
                arg2ConceptId = null;
                arg2Value = null;
                arg1Buckwalter = null;
                arg2Buckwalter = null;

                //prepare arguement 1
                arg1ConceptId = DMAutoIE.getValueAt(i, GridDM.Arg1Class_Index).toString();
                arg1Value = DMAutoIE.getValueAt(i, GridDM.Arg1Value_Index).toString();
                arg1Buckwalter = DMAutoIE.getValueAt(i, GridDM.Arg1Buckwalter_Index).toString();

                //prepare arguement 2, if a value exist, also prepare the binary relation
                if (DMAutoIE.getValueAt(i, GridDM.Arg2Class_Index) != null) {
                    arg2ConceptId = DMAutoIE.getValueAt(i, GridDM.Arg2Class_Index).toString();
                    arg2Value = DMAutoIE.getValueAt(i, 5).toString();

                    if (DMAutoIE.getValueAt(i, GridDM.Arg2Buckwalter_Index) != null) {
                        arg2Buckwalter = DMAutoIE.getValueAt(i, GridDM.Arg2Buckwalter_Index).toString();
                    }

                    //since its binary, get Class or Relation name
                    classOrRelationConceptId = DMAutoIE.getValueAt(i, GridDM.ClassOrRelationConceptId_Index).toString();
                }

                //create an individual, use Buckwalter value for the new instance
                io.CreateIndividualByClassName(arg1ConceptId, arg1Buckwalter);
                io.CreateArabicAnnotationAssertionAxiom(arg1Buckwalter, arg1Value);

                if (arg2Value != null) {
                    //create an individual, use Buckwalter value for the new instance
                    io.CreateIndividualByClassName(arg2ConceptId, arg2Buckwalter);
                    io.CreateArabicAnnotationAssertionAxiom(arg2Buckwalter, arg2Value);

                    //If both concepts and their values are not null, then create the binary relation
                    if ((arg1Buckwalter != null)
                            && (arg2Buckwalter != null)) {
                        io.CreateObjectRelationByNameString(classOrRelationConceptId, arg1Buckwalter,
                                arg2Buckwalter);
                        System.out.println(i + " :: " + arg1Buckwalter + " " + classOrRelationConceptId + " " + arg2Buckwalter + " created...");
                    }
                }//arg2Value not null
            }//for loop

            io.SaveOntology();
            
            JOptionPane.showMessageDialog(null, "Instances Successfully Created");
        } catch (OWLOntologyStorageException ex) {
            Logger.getLogger(InformationExctration.class.getName()).log(Level.SEVERE, null, ex.toString());
        } catch (Exception ex) {
            Logger.getLogger(InformationExctration.class.getName()).log(Level.SEVERE, null, ex.toString());
        }
    }//GEN-LAST:event_jMenuItemCreateABoxActionPerformed

    private void jMenuItemLoadFromTextFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLoadFromTextFileActionPerformed
        JFileChooser jfc = new JFileChooser();

        jfc.setCurrentDirectory(new File("D:\\OneDrive\\Thesis\\PHD Research\\Children Stories\\"));
        int returnVal = jfc.showOpenDialog(this);

        if (JFileChooser.APPROVE_OPTION == returnVal) {
            File file = jfc.getSelectedFile();
            try {
                LoadStoryFromFile(file.getAbsolutePath());

            } catch (SQLException ex) {
                Logger.getLogger(InformationExctration.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_jMenuItemLoadFromTextFileActionPerformed

    private void jMenuToolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuToolsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuToolsActionPerformed

    private void jMenuSelectOntologyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSelectOntologyActionPerformed
        try {
            JFileChooser jfc = new JFileChooser();
            jfc.setCurrentDirectory(new File(Globals.OntologyDefaultDirectory));
            int returnVal = jfc.showOpenDialog(this);

            if (JFileChooser.APPROVE_OPTION != returnVal) {
                System.out.println("File access cancelled by user.");
                return;
            }

            OntologyPath = jfc.getCurrentDirectory().getAbsolutePath();
            OntologyFile = jfc.getSelectedFile().getAbsoluteFile().getName();

            OntologyInterface = new OntologyInterface(jfc.getSelectedFile().getAbsolutePath());

        } catch (OWLOntologyCreationException ex) {
            Logger.getLogger(InformationExctration.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (Exception ex) {
            Logger.getLogger(InformationExctration.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuSelectOntologyActionPerformed

    private int FindTableRow(int paraLineNumber, String paraConceptId, String paraArgumentOneClass, String paraArgumentOneValue, String paraArgumentTwoClass, String paraArgumentTwoValue) {
        for (int i = 0; i < DMAutoIE.getRowCount(); i++) {
            if ((((Integer) DMAutoIE.getValueAt(i, 0)) == paraLineNumber) && (DMAutoIE.getValueAt(i, 1) == paraConceptId) && (DMAutoIE.getValueAt(i, 2) == paraArgumentOneClass)
                    && (DMAutoIE.getValueAt(i, 3) == paraArgumentOneValue) && (DMAutoIE.getValueAt(i, 4) == paraArgumentTwoClass)
                    && (DMAutoIE.getValueAt(i, 5) == paraArgumentTwoValue)) {
                return i;
            }
        }
        return -1;
    }

    private void LoadStoryFromFile(String paraSampleStory) throws SQLException {
        File fileDir = new File(paraSampleStory);
        StanfordTagger stanfordTagger = new StanfordTagger();
        StanfordParser stanfordParser = new StanfordParser();

        try {
            ClearListModels();

            try (BufferedReader in = new BufferedReader(
                    new InputStreamReader(
                            new FileInputStream(fileDir), "UTF8"))) {
                String str;

                while ((str = in.readLine()) != null) {
                    dmjListTextLine.addElement(str);
                    dmjlistSentenceExpandedPOS.addElement(stanfordTagger.TagString(str));
                    dmjListParse.addElement(stanfordParser.ParseString(str));
                }
            }

            jListSentenceText.setModel(dmjListTextLine);
            jListSentenceExpandedPOS.setModel(dmjlistSentenceExpandedPOS);
            jListSentenceREReadyPOS.setModel(dmjlistSentenceREReadyPOS);
            jListCorrectedParseTree.setModel(dmjListParse);

        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(InformationExctration.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (FileNotFoundException ex) {
            Logger.getLogger(InformationExctration.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (IOException ex) {
            Logger.getLogger(InformationExctration.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void LoadStorySentencesFromDB(String paraStoryId) throws SQLException, ClassNotFoundException {

        ClearListModels();
        DACSentence dacSentence = new DACSentence();

        ResultSet resultSet = dacSentence.GetAllRowsByStoryId(Integer.parseInt(paraStoryId));

        while (resultSet.next()) {
            dmjListTextLine.addElement(resultSet.getString("sentence_text"));
            dmjlistSentenceExpandedPOS.addElement(resultSet.getString("sentence_expanded_pos"));
            dmjlistSentenceREReadyPOS.addElement(resultSet.getString("regular_expression_ready_pos"));
            dmjListParse.addElement(resultSet.getString("corrected_parse_tree"));
        }

        jListSentenceText.setModel(dmjListTextLine);
        jListSentenceExpandedPOS.setModel(dmjlistSentenceExpandedPOS);
        jListSentenceREReadyPOS.setModel(dmjlistSentenceREReadyPOS);
        jListCorrectedParseTree.setModel(dmjListParse);
    }

    private void RecalculateStatistics() {
        Set<String> set = new HashSet<String>();

        for (int i = 0; i < DMAutoIE.getRowCount(); i++) {
            set.add(DMAutoIE.getValueAt(i, GridDM.ClassOrRelationConceptId_Index).toString());
        }

        for (int i = 0; i < DMManuallyExtractedConcepts.getRowCount(); i++) {
            set.add(DMManuallyExtractedConcepts.getValueAt(i, 3).toString());//concept it is the fourth
        }

        DMStatisticalResults = new DefaultTableModel();

        DMStatisticalResults.addColumn("Concept Id");
        DMStatisticalResults.addColumn("TP");
        DMStatisticalResults.addColumn("FP");
        DMStatisticalResults.addColumn("FN");
        DMStatisticalResults.addColumn("Precision");
        DMStatisticalResults.addColumn("Recall");

        for (String conceptId : set) {

            Object[] data = {conceptId};
            DMStatisticalResults.addRow(data);
        }

        jTableStatisticalResults.setModel(DMStatisticalResults);

    }

    private void LoadManuallyExtractedConcepts(String paraStoryId) throws SQLException, ClassNotFoundException {
        DMManuallyExtractedConcepts = new DefaultTableModel();

        DMManuallyExtractedConcepts.addColumn("Sentence Id");
        DMManuallyExtractedConcepts.addColumn("Arg 1 Concept Id");
        DMManuallyExtractedConcepts.addColumn("Arg 1");
        DMManuallyExtractedConcepts.addColumn("Concept Id");
        DMManuallyExtractedConcepts.addColumn("Arg 2 Concept Id");
        DMManuallyExtractedConcepts.addColumn("Arg 2");
        DMManuallyExtractedConcepts.addColumn("Match Level");

        DACSentenceConcept dacSentenceConcept = new DACSentenceConcept();
        ResultSet resultSet = dacSentenceConcept.GetAllRowsByStoryId(Integer.parseInt(paraStoryId));

        while (resultSet.next()) {
            Object[] data = {resultSet.getInt("sentence_id"),
                resultSet.getString("argument_1_concept_id"),
                resultSet.getString("argument_1"),
                resultSet.getString("concept_id"),
                resultSet.getString("argument_2_concept_id"),
                resultSet.getString("argument_2"),
                ""};

            DMManuallyExtractedConcepts.addRow(data);
        }
        jTableManuallyExtractedConcepts.setModel(DMManuallyExtractedConcepts);
    }

    private void ClearListModels() {
        dmjListTextLine.removeAllElements();
        dmjlistSentenceExpandedPOS.removeAllElements();
        dmjlistSentenceREReadyPOS.removeAllElements();
        dmjListParse.removeAllElements();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList<String> jListCorrectedParseTree;
    private javax.swing.JList<String> jListSentenceExpandedPOS;
    private javax.swing.JList<String> jListSentenceREReadyPOS;
    private javax.swing.JList<String> jListSentenceText;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItemCreateABox;
    private javax.swing.JMenuItem jMenuItemExctractConcepts;
    private javax.swing.JMenuItem jMenuItemLoadFromTextFile;
    private javax.swing.JMenuItem jMenuSelectOntology;
    private javax.swing.JMenu jMenuTools;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanelExpandedPOS;
    private javax.swing.JPanel jPanelParseTree;
    private javax.swing.JPanel jPanelREReadyPOS;
    private javax.swing.JPanel jPanelSentenceText;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTableAssertedAxioms;
    private javax.swing.JTable jTableAutomaticallyExtractedConcepts;
    private javax.swing.JTable jTableManuallyExtractedConcepts;
    private javax.swing.JTable jTableStatisticalResults;
    // End of variables declaration//GEN-END:variables
}
