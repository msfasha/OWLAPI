/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Form;

import DB.DAC.DACOntology;
import DB.DAC.DACSentence;
import DB.DAC.DACSentenceConcept;
import DB.Sentence;
import DB.SentenceConcept;
import Utility.CapturedConceptStructure;
import Utility.ConceptCategoryDefinition;
import Utility.EnumRecordMovementDirection;
import Utility.Globals;
import Utility.OntologyInterface;
import java.awt.Color;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.CaretEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.semanticweb.owlapi.model.OWLOntologyCreationException;

/**
 *
 * @author Mohammad Fasha
 */
public class OWLAnnotation extends javax.swing.JInternalFrame {

    OntologyInterface o;
    DACSentence dacSentence;
    DACSentenceConcept dacSentenceConcept;
    DefaultTableModel dataModelConceptsListConceptExtraction;
    DefaultTableModel dataModelConceptsListOWLAnnotation;
    DefaultTableModel dtmSentenceConcepts;

    ArrayList<javax.swing.JPanel> PanelsArray;
    ArrayList<javax.swing.JToggleButton> ToggleButtonsArray;

    Clipboard clipBoard;

    javax.swing.JTextArea ActiveTextArea;
    OntologyInterface ontologyInterface;

    public OWLAnnotation() {
        initComponents();

        //Fill combo boxes
        CBConceptCompositeLevelId.addItem("Atomic");
        CBConceptCompositeLevelId.addItem("Composite");
        clipBoard = Toolkit.getDefaultToolkit().getSystemClipboard();

        //reset jTreePOSTags
        jTreePOSTags.removeAll();
        jTreePOSTags.setModel(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LblSInfo = new javax.swing.JLabel();
        jLabelOntologyStatus = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTreePOSTags = new javax.swing.JTree();
        CMDFirstSentence = new javax.swing.JButton();
        CMDPreviousSentence = new javax.swing.JButton();
        CMDNextSentence = new javax.swing.JButton();
        CMDLastSentence = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableConceptExtraction = new javax.swing.JTable();
        L1 = new javax.swing.JLabel();
        jLabelArgument1 = new javax.swing.JLabel();
        jTextArgument1 = new javax.swing.JTextField();
        jLabelSelectedConcept = new javax.swing.JLabel();
        jLabelArgument2 = new javax.swing.JLabel();
        jTextArgument2 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jTextPatternId = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jCheckBoxImplicit = new javax.swing.JCheckBox();
        jCheckBoxNegation = new javax.swing.JCheckBox();
        CBConceptCompositeLevelId = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTANote = new javax.swing.JTextArea();
        CMDLastSC = new javax.swing.JButton();
        CMDNextSC = new javax.swing.JButton();
        CMDPreviousSC = new javax.swing.JButton();
        CMDFirstSC = new javax.swing.JButton();
        L2 = new javax.swing.JLabel();
        L3 = new javax.swing.JLabel();
        L4 = new javax.swing.JLabel();
        L5 = new javax.swing.JLabel();
        L6 = new javax.swing.JLabel();
        Del = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuTools = new javax.swing.JMenu();
        jMenuItemSelectOntology = new javax.swing.JMenuItem();
        jMenuItemLoadTextFromDB = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemUploadOWLConceptsIntoDB = new javax.swing.JMenuItem();

        setClosable(true);

        LblSInfo.setText("...");

        jLabelOntologyStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelOntologyStatus.setForeground(new java.awt.Color(255, 51, 51));
        jLabelOntologyStatus.setText("No OWL Ontology Selected...");

        jTreePOSTags.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTreePOSTags.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreePOSTagsValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(jTreePOSTags);

        CMDFirstSentence.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CMDFirstSentence.setText("<<");
        CMDFirstSentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDFirstSentenceActionPerformed(evt);
            }
        });

        CMDPreviousSentence.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CMDPreviousSentence.setText("<");
        CMDPreviousSentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDPreviousSentenceActionPerformed(evt);
            }
        });

        CMDNextSentence.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CMDNextSentence.setText(">");
        CMDNextSentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDNextSentenceActionPerformed(evt);
            }
        });

        CMDLastSentence.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CMDLastSentence.setText(">>");
        CMDLastSentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDLastSentenceActionPerformed(evt);
            }
        });

        jTableConceptExtraction.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Concept Id", "Category", "Arg 1 Class", "Arg 2 Class", "Parent Class"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableConceptExtraction.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableConceptExtractionMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableConceptExtraction);

        L1.setText("Id");

        jLabelArgument1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelArgument1.setForeground(new java.awt.Color(0, 102, 0));
        jLabelArgument1.setText("Arg1");

        jTextArgument1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextArgument1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextArgument1MouseClicked(evt);
            }
        });
        jTextArgument1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextArgument1ActionPerformed(evt);
            }
        });

        jLabelSelectedConcept.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelSelectedConcept.setForeground(new java.awt.Color(0, 102, 0));
        jLabelSelectedConcept.setText("...");

        jLabelArgument2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelArgument2.setForeground(new java.awt.Color(0, 102, 0));
        jLabelArgument2.setText("Arg2");

        jTextArgument2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextArgument2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextArgument2MouseClicked(evt);
            }
        });

        jLabel19.setText("Composite Level");

        jLabel22.setText("Pattern Id");

        jTextPatternId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel18.setText("Implicit");

        jLabel20.setText("Negation");

        CBConceptCompositeLevelId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel16.setText("Note");

        jTANote.setColumns(20);
        jTANote.setFont(new java.awt.Font("Courier New", 1, 12)); // NOI18N
        jTANote.setRows(5);
        jScrollPane2.setViewportView(jTANote);

        CMDLastSC.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CMDLastSC.setText(">>");
        CMDLastSC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDLastSCActionPerformed(evt);
            }
        });

        CMDNextSC.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CMDNextSC.setText(">");
        CMDNextSC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDNextSCActionPerformed(evt);
            }
        });

        CMDPreviousSC.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CMDPreviousSC.setText("<");
        CMDPreviousSC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDPreviousSCActionPerformed(evt);
            }
        });

        CMDFirstSC.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CMDFirstSC.setText("<<");
        CMDFirstSC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDFirstSCActionPerformed(evt);
            }
        });

        L2.setText("..");

        L3.setText("Sentence Id");

        L4.setText("..");

        L5.setText("Sequence Number");

        L6.setText("..");

        Del.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Del.setText("Delete");
        Del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DelActionPerformed(evt);
            }
        });

        jMenuTools.setText("Tools");
        jMenuTools.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuToolsActionPerformed(evt);
            }
        });

        jMenuItemSelectOntology.setText("Select Ontology");
        jMenuItemSelectOntology.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSelectOntologyActionPerformed(evt);
            }
        });
        jMenuTools.add(jMenuItemSelectOntology);

        jMenuItemLoadTextFromDB.setText("Load Text From DB");
        jMenuItemLoadTextFromDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLoadTextFromDBActionPerformed(evt);
            }
        });
        jMenuTools.add(jMenuItemLoadTextFromDB);
        jMenuTools.add(jSeparator1);

        jMenuItemUploadOWLConceptsIntoDB.setText("Upload OWL Concepts into DB");
        jMenuItemUploadOWLConceptsIntoDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemUploadOWLConceptsIntoDBActionPerformed(evt);
            }
        });
        jMenuTools.add(jMenuItemUploadOWLConceptsIntoDB);

        jMenuBar1.add(jMenuTools);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(430, 430, 430)
                .addComponent(L2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(L3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(L4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(L5, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(L6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(218, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Del, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(325, 325, 325))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(jLabelOntologyStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(LblSInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)
                            .addComponent(L1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(80, 80, 80)
                            .addComponent(CMDFirstSentence, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(CMDPreviousSentence, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(CMDNextSentence, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(CMDLastSentence)
                            .addGap(87, 87, 87)
                            .addComponent(jLabelArgument1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(180, 180, 180)
                            .addComponent(jLabelArgument2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(370, 370, 370)
                            .addComponent(jTextArgument1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(jLabelSelectedConcept, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(jTextArgument2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(370, 370, 370)
                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(290, 290, 290)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(370, 370, 370)
                            .addComponent(jTextPatternId, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(200, 200, 200)
                            .addComponent(CBConceptCompositeLevelId, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(370, 370, 370)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(jLabel18))
                                .addComponent(jLabel20))
                            .addGap(27, 27, 27)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jCheckBoxImplicit)
                                .addComponent(jCheckBoxNegation))
                            .addGap(259, 259, 259)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(570, 570, 570)
                            .addComponent(CMDFirstSC, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(CMDPreviousSC, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(CMDNextSC, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(CMDLastSC)))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L2)
                    .addComponent(L3)
                    .addComponent(L4)
                    .addComponent(L5)
                    .addComponent(L6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 485, Short.MAX_VALUE)
                .addComponent(Del)
                .addGap(32, 32, 32))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabelOntologyStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(10, 10, 10)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(LblSInfo)
                        .addComponent(L1))
                    .addGap(6, 6, 6)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(CMDFirstSentence)
                        .addComponent(CMDPreviousSentence)
                        .addComponent(CMDNextSentence)
                        .addComponent(CMDLastSentence)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelArgument1)
                                .addComponent(jLabelArgument2))))
                    .addGap(6, 6, 6)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextArgument1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelSelectedConcept, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextArgument2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(9, 9, 9)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel22)
                        .addComponent(jLabel19))
                    .addGap(6, 6, 6)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextPatternId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(CBConceptCompositeLevelId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(9, 9, 9)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel16)
                            .addGap(6, 6, 6)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel18)
                                    .addGap(16, 16, 16)
                                    .addComponent(jLabel20))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jCheckBoxImplicit)
                                    .addGap(9, 9, 9)
                                    .addComponent(jCheckBoxNegation)))))
                    .addGap(10, 10, 10)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(CMDFirstSC)
                        .addComponent(CMDPreviousSC)
                        .addComponent(CMDNextSC)
                        .addComponent(CMDLastSC))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTreePOSTagsValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreePOSTagsValueChanged
        try {
            DefaultMutableTreeNode selectedNode
                    = (DefaultMutableTreeNode) jTreePOSTags.getLastSelectedPathComponent();

            if (selectedNode == null) {
                return;
            }

        } catch (Exception ex) {
            Logger.getLogger(OWLAnnotation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTreePOSTagsValueChanged

    private void CMDFirstSentenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMDFirstSentenceActionPerformed
        try {
            DisplaySentenceRecord(dacSentence.MoveRecord(EnumRecordMovementDirection.First));
            RefreshSentenceConceptResultSet();
        } catch (Exception ex) {
            Logger.getLogger(OWLAnnotation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CMDFirstSentenceActionPerformed

    private void CMDPreviousSentenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMDPreviousSentenceActionPerformed

        try {
            DisplaySentenceRecord(dacSentence.MoveRecord(EnumRecordMovementDirection.Previous));
            RefreshSentenceConceptResultSet();
        } catch (Exception ex) {
            Logger.getLogger(OWLAnnotation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CMDPreviousSentenceActionPerformed

    private void CMDNextSentenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMDNextSentenceActionPerformed

        try {
            DisplaySentenceRecord(dacSentence.MoveRecord(EnumRecordMovementDirection.Next));
            RefreshSentenceConceptResultSet();
        } catch (Exception ex) {
            Logger.getLogger(OWLAnnotation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CMDNextSentenceActionPerformed

    private void CMDLastSentenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMDLastSentenceActionPerformed
        try {
            DisplaySentenceRecord(dacSentence.MoveRecord(EnumRecordMovementDirection.Last));
            RefreshSentenceConceptResultSet();
        } catch (Exception ex) {
            Logger.getLogger(OWLAnnotation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CMDLastSentenceActionPerformed

    private void jTableConceptExtractionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableConceptExtractionMouseClicked
        try {
            ChangeConceptArgumentsSettings();
        } catch (Exception ex) {
            Logger.getLogger(OWLAnnotation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTableConceptExtractionMouseClicked

    private void jTextArgument1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArgument1MouseClicked
        //        try {
        //            jTextArgument1.setText((String) clipBoard.getData(DataFlavor.stringFlavor));
        //        } catch (UnsupportedFlavorException | IOException ex) {
        //                                     Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        //        }
    }//GEN-LAST:event_jTextArgument1MouseClicked

    private void jTextArgument1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextArgument1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextArgument1ActionPerformed

    private void jTextArgument2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArgument2MouseClicked
        //           try {
        //            jTextArgument2.setText((String) clipBoard.getData(DataFlavor.stringFlavor));
        //        } catch (UnsupportedFlavorException | IOException ex) {
        //                                     Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        //        }
    }//GEN-LAST:event_jTextArgument2MouseClicked

    private void CMDLastSCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMDLastSCActionPerformed
        try {
            //Save the record if there is valid data
            if (SentenceConceptDataIsValid()) {
                dacSentenceConcept.SaveRecord(CaptureScreenDisplayedSCRecord());
            }
            DisplaySentenceConceptRecord(dacSentenceConcept.MoveRecord(EnumRecordMovementDirection.Last));
        } catch (Exception ex) {
            Logger.getLogger(OWLAnnotation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CMDLastSCActionPerformed

    private void CMDNextSCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMDNextSCActionPerformed

        try {
            //Save the record if there is valid data
            if (SentenceConceptDataIsValid()) {
                dacSentenceConcept.SaveRecord(CaptureScreenDisplayedSCRecord());
            }
            DisplaySentenceConceptRecord(dacSentenceConcept.MoveRecord(EnumRecordMovementDirection.Next));
        } catch (Exception ex) {
            Logger.getLogger(OWLAnnotation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CMDNextSCActionPerformed

    private void CMDPreviousSCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMDPreviousSCActionPerformed

        try {
            //Save the record if there is valid data
            if (SentenceConceptDataIsValid()) {
                dacSentenceConcept.SaveRecord(CaptureScreenDisplayedSCRecord());
            }
            DisplaySentenceConceptRecord(dacSentenceConcept.MoveRecord(EnumRecordMovementDirection.Previous));
        } catch (Exception ex) {
            Logger.getLogger(OWLAnnotation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CMDPreviousSCActionPerformed

    private void CMDFirstSCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMDFirstSCActionPerformed

        try {
            //Save the record if there is valid data
            if (SentenceConceptDataIsValid()) {
                dacSentenceConcept.SaveRecord(CaptureScreenDisplayedSCRecord());
            }
            DisplaySentenceConceptRecord(dacSentenceConcept.MoveRecord(EnumRecordMovementDirection.First));
        } catch (Exception ex) {
            Logger.getLogger(OWLAnnotation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CMDFirstSCActionPerformed

    private void jMenuItemSelectOntologyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSelectOntologyActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setCurrentDirectory(new File(Globals.OntologyDefaultDirectory));
        int returnVal = jfc.showOpenDialog(this);

        if (JFileChooser.APPROVE_OPTION == returnVal) {

            try {
                jLabelOntologyStatus.setText("Ontology Selected: " + jfc.getSelectedFile().getAbsolutePath());
                jLabelOntologyStatus.setForeground(Color.BLACK);

                ontologyInterface = new OntologyInterface(jfc.getSelectedFile().getAbsolutePath());

                PopulateOWLConceptsLists();
            } catch (OWLOntologyCreationException ex) {
                Logger.getLogger(OWLAnnotation.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(OWLAnnotation.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItemSelectOntologyActionPerformed

    private void jMenuItemLoadTextFromDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLoadTextFromDBActionPerformed
        try {
            if (dacSentence != null) {
                dacSentence.Dispose();
            }
            if (dacSentenceConcept != null) {
                dacSentenceConcept.Dispose();
            }

            dacSentence = new DACSentence();
            dacSentence.InitializeRowSet();

            DisplaySentenceRecord(dacSentence.GetCurrentRecord());

            dacSentenceConcept = new DACSentenceConcept();

            RefreshSentenceConceptResultSet();
        } catch (ClassNotFoundException | SQLException ex) {
            javax.swing.JOptionPane.showMessageDialog(null, ex.toString());
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(null, ex.toString());
        }
    }//GEN-LAST:event_jMenuItemLoadTextFromDBActionPerformed

    private void jMenuToolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuToolsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuToolsActionPerformed

    private void jMenuItemUploadOWLConceptsIntoDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemUploadOWLConceptsIntoDBActionPerformed
        //If ontology is not selected then select one
        if (ontologyInterface == null) {
            jMenuItemSelectOntologyActionPerformed(null);
            if (ontologyInterface == null) {
                return;
            }
        }

        Set<CapturedConceptStructure> opSet = ontologyInterface.GetObjectProperties();

        //Pre-process stored entities in DB
        DACOntology dacOntology;
        try {
            dacOntology = new DACOntology();
            dacOntology.SetAllConceptsAsOutOfOntology();
            for (CapturedConceptStructure ct : opSet) {
                dacOntology.DeleteRow(ct.ConceptId);
                dacOntology.InsertRow(ct.ConceptId, ct.ArgumentOneClass, ct.ArgumentTwoClass, "", "");
            }

            Set<CapturedConceptStructure> sSet = ontologyInterface.GetClasses();
            for (CapturedConceptStructure ct : sSet) {
                dacOntology.DeleteRow(ct.ConceptId);
                dacOntology.InsertRow(ct.ConceptId, "", "", ct.ParentClass, "");
            }

            JOptionPane.showMessageDialog(null, "Done...!");
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(InformationExctration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemUploadOWLConceptsIntoDBActionPerformed

    private void DelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DelActionPerformed
        // TODO add your handling code here:
          try {
            //Save the record if there is valid data
            if (SentenceConceptDataIsValid()) {
                dacSentenceConcept.DeleteCurrentRow(CaptureScreenDisplayedSCRecord().getId());
            }
            RefreshSentenceConceptResultSet();
        } catch (Exception ex) {
            Logger.getLogger(OWLAnnotation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DelActionPerformed

    private void DisplaySentenceRecord(Sentence paraSentence) throws Exception {

        LblSInfo.setText("Id: " + Integer.toString(paraSentence.getId())
                + "   Story Id:" + Integer.toString(paraSentence.getStoryId())
                + "   Line No: " + Integer.toString(paraSentence.getLineNumber()));

        StringToTree(paraSentence.getSentenceText(), paraSentence.getSentenceExpandedPos());
    }

    private void DisplaySentenceConceptRecord(SentenceConcept paraSentenceConcept) throws Exception {

        L2.setText(Integer.toString(paraSentenceConcept.getId()));
        L4.setText(Integer.toString(paraSentenceConcept.getSentenceId()));
        L6.setText(Integer.toString(paraSentenceConcept.getConceptSequenceNumber()));

        SelectjTableConceptsListConceptExtractiontRow(paraSentenceConcept.getConceptId());
        jTextPatternId.setText(Integer.toString(paraSentenceConcept.getConceptPatternId()));
        jTextArgument1.setText(paraSentenceConcept.getArgument1());
        jTextArgument2.setText(paraSentenceConcept.getArgument2());
        jLabelArgument1.setText(paraSentenceConcept.getArgument1ConceptId());
        jLabelArgument2.setText(paraSentenceConcept.getArgument2ConceptId());
        jCheckBoxImplicit.setSelected(paraSentenceConcept.getImplicit());
        CBConceptCompositeLevelId.setSelectedItem(paraSentenceConcept.getConceptCompositeLevel());
        jCheckBoxNegation.setSelected(paraSentenceConcept.getNegation());
        jTANote.setText(paraSentenceConcept.getNote());

    }

    private SentenceConcept CaptureScreenDisplayedSCRecord() throws Exception {
        SentenceConcept sentenceConceptRecord = new SentenceConcept();

        sentenceConceptRecord.setId(Integer.parseInt(L2.getText()));
        sentenceConceptRecord.setSentenceId(Integer.parseInt(L4.getText()));
        sentenceConceptRecord.setConceptSequenceNumber(Integer.parseInt(L6.getText()));

        sentenceConceptRecord.setConceptId(dataModelConceptsListConceptExtraction.getValueAt(jTableConceptExtraction.getSelectedRow(), 0).toString());
        sentenceConceptRecord.setConceptPatternId(Integer.parseInt(jTextPatternId.getText()));
        sentenceConceptRecord.setArgument1(jTextArgument1.getText());
        sentenceConceptRecord.setArgument1ConceptId(jLabelArgument1.getText());
        sentenceConceptRecord.setArgument2(jTextArgument2.getText());
        sentenceConceptRecord.setArgument2ConceptId(jLabelArgument2.getText());
        sentenceConceptRecord.setImplicit(jCheckBoxImplicit.isSelected());
        sentenceConceptRecord.setConceptCompositeLevel(CBConceptCompositeLevelId.getSelectedItem().toString());
        sentenceConceptRecord.setNegation(jCheckBoxNegation.isSelected());
        sentenceConceptRecord.setNote(jTANote.getText());

        return sentenceConceptRecord;
    }

    private void RefreshSentenceConceptResultSet() throws SQLException {
        try {
            //Everytime a new Sentence is displayed, we need to refresh the SentenceConcepts
            //Save the record if there is valid data
            if (SentenceConceptDataIsValid()) {
                dacSentenceConcept.SaveRecord(CaptureScreenDisplayedSCRecord());
            }

            dacSentenceConcept.InitializeRowSet(dacSentence.GetCurrentRecord().getId());
            DisplaySentenceConceptRecord(dacSentenceConcept.GetRecord());
        } catch (Exception ex) {
            Logger.getLogger(OWLAnnotation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void PopulateOWLConceptsLists() {

        try {
            ReCreateTablesDTMModels();

            List<CapturedConceptStructure> resultList = ontologyInterface.ParseOntology();

            Collections.sort(resultList, (CapturedConceptStructure s1, CapturedConceptStructure s2) -> {
                return s1.ConceptId.compareToIgnoreCase(s2.ConceptId);
            });

            //Populate Concept Extraction Data Model
            for (int ii = 0; ii < resultList.size(); ii++) {
                Object[] data = {resultList.get(ii).ConceptId,
                    resultList.get(ii).Category,
                    resultList.get(ii).ArgumentOneClass,
                    resultList.get(ii).ArgumentTwoClass,
                    resultList.get(ii).ParentClass};

                dataModelConceptsListConceptExtraction.addRow(data);
            }

            //Populate Semantic Annotation Data Model
            for (int ii = 0; ii < resultList.size(); ii++) {
                if (resultList.get(ii).Category.equalsIgnoreCase("Unary")) {
                    Object[] data = {resultList.get(ii).ConceptId};
                    dataModelConceptsListOWLAnnotation.addRow(data);
                }
            }

            jTableConceptExtraction.setModel(dataModelConceptsListConceptExtraction);
        } catch (OWLOntologyCreationException ex) {
            Logger.getLogger(OWLAnnotation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(OWLAnnotation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void ReCreateTablesDTMModels() throws Exception {
        if (dataModelConceptsListConceptExtraction != null) {
            dataModelConceptsListConceptExtraction = null;
        }

        dataModelConceptsListConceptExtraction = new DefaultTableModel();
        dataModelConceptsListConceptExtraction.addColumn("Concept Id");
        dataModelConceptsListConceptExtraction.addColumn("Category");
        dataModelConceptsListConceptExtraction.addColumn("Arg 1 Class");
        dataModelConceptsListConceptExtraction.addColumn("Arg 2 Class");
        dataModelConceptsListConceptExtraction.addColumn("Parent Class");

        if (dataModelConceptsListOWLAnnotation != null) {
            dataModelConceptsListOWLAnnotation = null;
        }

        dataModelConceptsListOWLAnnotation = new DefaultTableModel();
        dataModelConceptsListOWLAnnotation.addColumn("Concept Id");
    }

    private void ChangeConceptArgumentsSettings() throws Exception {
        switch (dataModelConceptsListConceptExtraction.getValueAt(jTableConceptExtraction.getSelectedRow(), 1).toString()) {
            case ConceptCategoryDefinition.ClassLabel:
                jLabelArgument1.setText(dataModelConceptsListConceptExtraction.getValueAt(jTableConceptExtraction.getSelectedRow(), 0).toString());
                jLabelArgument2.setText("");
                jTextArgument2.setEnabled(false);
                break;
            case ConceptCategoryDefinition.ObjectCategoryLabel:
                jLabelArgument1.setText("Argument 1");
                jLabelArgument2.setText("Argument 2");

                jTextArgument2.setEnabled(true);

                if (dataModelConceptsListConceptExtraction.getValueAt(jTableConceptExtraction.getSelectedRow(), 2) != null) {
                    jLabelArgument1.setText(dataModelConceptsListConceptExtraction.getValueAt(jTableConceptExtraction.getSelectedRow(), 2).toString());
                }

                if (dataModelConceptsListConceptExtraction.getValueAt(jTableConceptExtraction.getSelectedRow(), 3) != null) {
                    jLabelArgument2.setText(dataModelConceptsListConceptExtraction.getValueAt(jTableConceptExtraction.getSelectedRow(), 3).toString());
                }
                break;
        }

        jLabelSelectedConcept.setText(dataModelConceptsListConceptExtraction.getValueAt(jTableConceptExtraction.getSelectedRow(), 0).toString());
    }

    private boolean SentenceConceptDataIsValid() throws Exception {
        return jTableConceptExtraction.getSelectedRow() != -1;
    }

    private void SelectjTableConceptsListConceptExtractiontRow(String paraString) throws Exception {
        jTableConceptExtraction.clearSelection();
        jLabelSelectedConcept.setText(paraString);

        if (dataModelConceptsListConceptExtraction == null) {
            return;
        }

        for (int i = 0; i < dataModelConceptsListConceptExtraction.getRowCount(); i++) {
            // 0 is for the column Part number
            if (dataModelConceptsListConceptExtraction.getValueAt(i, 0).toString().equalsIgnoreCase(paraString)) {
                jTableConceptExtraction.setRowSelectionInterval(i, i);
                jLabelSelectedConcept.setText(paraString);

                jTableConceptExtraction.scrollRectToVisible(new Rectangle(jTableConceptExtraction.getCellRect(i, 0, true)));
                ChangeConceptArgumentsSettings();
                break;
            }
        }
    }

    public void UpdateCaret(CaretEvent evt) {
        try {
            ActiveTextArea = (javax.swing.JTextArea) evt.getSource();
            int cursorPosition = evt.getDot();

            //this code skips this procedure when run during form initialization
            if (cursorPosition == ActiveTextArea.getText().length()) {
                return;
            }

            //we need to get the tokenId under cursor
            //to do that, we shall find the beginning of the current item then extract its number
            int selectionStartPosition = -1;

            char[] charArray = ActiveTextArea.getText().toCharArray();
            for (int i = cursorPosition; i >= 0; i--) {
                if (((int) (charArray[cursorPosition - (cursorPosition - i)]) == 32)
                        || (i == 0)) {
                    if (i == 0) {
                        //Just return the current i index
                        selectionStartPosition = i;
                        break;
                    } else {
                        //if not the first token, then add 1 to compensate for the space after the token
                        //because the begining of this token shall be right after the space character
                        selectionStartPosition = i + 1;
                        break;
                    }
                }
            }

            int tokenId = Integer.valueOf(ActiveTextArea.getText().substring(selectionStartPosition, ActiveTextArea.getText().indexOf(":", selectionStartPosition)));

            //now set the Jtree to the current token id
            DefaultTreeModel model = (DefaultTreeModel) jTreePOSTags.getModel();
            DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();

            TreePath path = new TreePath(model.getPathToRoot(root.getChildAt(tokenId)));
            jTreePOSTags.setSelectionPath(path);
            jTreePOSTags.scrollPathToVisible(path);
        } catch (Exception ex) {
            Logger.getLogger(OWLAnnotation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    protected String RecursiveTreeParse(DefaultTreeModel model, Object o) {
        String str = "";
        int count = model.getChildCount(o);
        for (int i = 0; i < count; i++) {
            DefaultMutableTreeNode child = (DefaultMutableTreeNode) model.getChild(o, i);
            if (model.isLeaf(child)) {
                str = str + child.toString();
            } else if (child.getLevel() == 1) {
                String s;
                s = Utility.Globals.StripNonDigits(child.toString());
                s = s + ":";

                String filler = "";//set string to empty string not null or else null will be explicitly placed in string
                if (str.length() > 0) {
                    filler = " ";
                }

                str = str + filler + s + "(" + RecursiveTreeParse(model, child) + ")";
            } else {
                str = str + child.toString() + "(" + RecursiveTreeParse(model, child) + ")";
            }
        }
        return str;
    }

    private void StringToTree(String paraSentence, String paraPOS) {
        try {
            jTreePOSTags.removeAll();
            jTreePOSTags.setModel(null);

            DefaultMutableTreeNode root = new DefaultMutableTreeNode("Sentence");
            DefaultMutableTreeNode childNode;

            String[] wordsArray = paraSentence.split(" ");
            String[] posArray = paraPOS.split(" ");

            for (int i = 0; i < wordsArray.length; i++) {
                childNode = new DefaultMutableTreeNode(wordsArray[i]);
                root.add(childNode);

                String posTagStr = posArray[i].substring(posArray[i].indexOf(":") + 1, posArray[i].toString().length());

                Stack<DefaultMutableTreeNode> stack = new Stack<>();
                DefaultMutableTreeNode activeParentNode = childNode;

                DefaultMutableTreeNode cn = null;
                for (int ii = 0; ii < posTagStr.length(); ii++) {
                    switch (posTagStr.charAt(ii)) {
                        case 40://openning bracket (                                                        
                            if (cn != null)//not the first bracket
                            {
                                stack.push(activeParentNode);
                                activeParentNode = cn;
                            }
                            break;
                        case 41:
                            if (stack.size() > 0) {
                                activeParentNode = stack.pop();
                            }
                            break;
                        case 123:
                            cn = new DefaultMutableTreeNode("");
                            activeParentNode.add(cn);
                            cn.setUserObject(cn.getUserObject() + String.valueOf(posTagStr.charAt(ii)));
                            break;
                        default:
                            cn.setUserObject(cn.getUserObject() + String.valueOf(posTagStr.charAt(ii)));
                            break;
                    }
                }
            }

            DefaultTreeModel model = new DefaultTreeModel(root);
            jTreePOSTags.setModel(model);
        } catch (Exception ex) {
            Logger.getLogger(OWLAnnotation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String TreeToString() {
        DefaultTreeModel model = (DefaultTreeModel) jTreePOSTags.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();

        //enable the following sentence and disable all the other
        //if you want to experiment with recursive, but things can 
        //get complicated in tagging and annotating
        return RecursiveTreeParse(model, root);

//        String str = "";
//
//        Enumeration e = root.preorderEnumeration();
//        //this is an iterative sequential mechnisn vs recursive
//        //iterate through all nodes in the tree and build token pos taggings accordingly
//        //
//        while (e.hasMoreElements()) {
//            DefaultMutableTreeNode child = (DefaultMutableTreeNode) e.nextElement();
//            //if this is a level one token, then extract the token id
//            if (child.getLevel() == 1) {
//                String tokenId = Utility.TextStripper.StripNonDigits(child.toString());
//                String filler = "";//set string to empty string not null or else null will be explicitly placed in string
//
//                //if this token is not the first one, then there shall be a pre-string
//                //therefore, append a spacebefore the new token
//                if (str.length() > 0) {
//                    filler = " ";
//                }
//
//                str = str + filler + tokenId + ":";
//            } 
//            //if this is a token below the first level, then just add it to the resulting full string
//            else if (child.getLevel() > 1) {
//                str = str + child.toString();
//            }
//        }
//
//        return str;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CBConceptCompositeLevelId;
    private javax.swing.JButton CMDFirstSC;
    private javax.swing.JButton CMDFirstSentence;
    private javax.swing.JButton CMDLastSC;
    private javax.swing.JButton CMDLastSentence;
    private javax.swing.JButton CMDNextSC;
    private javax.swing.JButton CMDNextSentence;
    private javax.swing.JButton CMDPreviousSC;
    private javax.swing.JButton CMDPreviousSentence;
    private javax.swing.JButton Del;
    private javax.swing.JLabel L1;
    private javax.swing.JLabel L2;
    private javax.swing.JLabel L3;
    private javax.swing.JLabel L4;
    private javax.swing.JLabel L5;
    private javax.swing.JLabel L6;
    private javax.swing.JLabel LblSInfo;
    private javax.swing.JCheckBox jCheckBoxImplicit;
    private javax.swing.JCheckBox jCheckBoxNegation;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabelArgument1;
    private javax.swing.JLabel jLabelArgument2;
    private javax.swing.JLabel jLabelOntologyStatus;
    private javax.swing.JLabel jLabelSelectedConcept;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemLoadTextFromDB;
    private javax.swing.JMenuItem jMenuItemSelectOntology;
    private javax.swing.JMenuItem jMenuItemUploadOWLConceptsIntoDB;
    private javax.swing.JMenu jMenuTools;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTextArea jTANote;
    private javax.swing.JTable jTableConceptExtraction;
    private javax.swing.JTextField jTextArgument1;
    private javax.swing.JTextField jTextArgument2;
    private javax.swing.JTextField jTextPatternId;
    private javax.swing.JTree jTreePOSTags;
    // End of variables declaration//GEN-END:variables
}
