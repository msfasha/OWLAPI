/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Form;

import DAC.DACSentence;
import DAC.DACSentenceConcept;
import DAC.Sentence;
import DAC.SentenceConcept;
import Utility.ConceptCategoryDefinition;
import Utility.ConceptMatchStructure;
import Utility.EnumRecordMovementDirection;
import Utility.OntologyInterface;
import Utility.POSTagDefinition;
import Utility.TextSkimmer;
import java.awt.Color;
import java.awt.Container;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.datatransfer.*;
import java.awt.datatransfer.Clipboard;
import java.awt.event.WindowEvent;
import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.event.CaretEvent;
import javax.swing.table.DefaultTableModel;
import org.semanticweb.owlapi.model.OWLOntologyCreationException;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 *
 * @author Mohammad Fasha
 */
public class AnnotationFrm extends javax.swing.JFrame {

    /**
     * Creates new form AnnotationFrm
     */
    OntologyInterface o;
    DACSentence dacSentence;
    DACSentenceConcept dacSentenceConcept;
    DefaultTableModel dataModelConceptsList;
    DefaultTableModel dtmSentenceConcepts;

    Clipboard clipBoard;
    int previousRowId;

    int SelectionStartPosition = 0;
    int SelectionEndPosition = 0;
    javax.swing.JTextArea CurrentjTextArea;
    String UserSelectedPOSSegment = "";

    public AnnotationFrm() throws OWLOntologyStorageException, OWLOntologyCreationException, ClassNotFoundException, SQLException {
        initComponents();

        //Fill combo boxes
        CBConceptCompositeLevelId.addItem("Atomic");
        CBConceptCompositeLevelId.addItem("Composite");
        clipBoard = Toolkit.getDefaultToolkit().getSystemClipboard();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        CMDFirstSentence = new javax.swing.JButton();
        CMDLastSentence = new javax.swing.JButton();
        CMDPreviousSentence = new javax.swing.JButton();
        CMDNextSentence = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextSCId = new javax.swing.JTextField();
        jTextSCSentenceId = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextConceptSequenceNumber = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jTextPatternId = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabelArgument1 = new javax.swing.JLabel();
        jTextArgument1 = new javax.swing.JTextField();
        jTextArgument2 = new javax.swing.JTextField();
        jLabelArgument2 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        CBConceptCompositeLevelId = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTANote = new javax.swing.JTextArea();
        jCheckBoxImplicit = new javax.swing.JCheckBox();
        CMDFirstSC = new javax.swing.JButton();
        CMDLastSC = new javax.swing.JButton();
        CMDPreviousSC = new javax.swing.JButton();
        CMDNextSC = new javax.swing.JButton();
        jLabelOntologyStatus = new javax.swing.JLabel();
        CmdClose = new javax.swing.JButton();
        CmdSelectOntology = new javax.swing.JButton();
        CmdRefreshDB = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableConceptsList = new javax.swing.JTable();
        jLabelSelectedConcept = new javax.swing.JLabel();
        jCheckBoxNegation = new javax.swing.JCheckBox();
        jTabbedPane = new javax.swing.JTabbedPane();
        jPanelPOSTags = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaCorrectedTextAndPOS = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextAreaSemanticTextandPOS = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextAreaExpandedTextandPOS = new javax.swing.JTextArea();
        jLabelEnd = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabelStart = new javax.swing.JLabel();
        jPanelParseTrees = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextCorrectedParseTree = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextParseTree = new javax.swing.JTextArea();
        jPanelOtherInfo = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jTextSentenceId = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextStoryId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextLineNumber = new javax.swing.JTextField();
        jTextTextOnly = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextTextAndPOS = new javax.swing.JTextField();
        jFileChooser = new javax.swing.JFileChooser();
        jTabbedPane_POS = new javax.swing.JTabbedPane();
        jPanelPennPOS = new javax.swing.JPanel();
        jToggleButtonPOSNoun = new javax.swing.JToggleButton();
        jToggleButtonPOSAdjective = new javax.swing.JToggleButton();
        jToggleButtonPOSAdverb = new javax.swing.JToggleButton();
        jToggleButtonPOSVerbGeneral = new javax.swing.JToggleButton();
        jToggleButtonPOSVerbPast = new javax.swing.JToggleButton();
        jToggleButtonPOSVerbPresent = new javax.swing.JToggleButton();
        jToggleButtonPOSGerund = new javax.swing.JToggleButton();
        jToggleButtonPOSPronoun = new javax.swing.JToggleButton();
        jToggleButtonPOSProperName = new javax.swing.JToggleButton();
        jToggleButtonPOSPreposition = new javax.swing.JToggleButton();
        jToggleButtonPOSParticle = new javax.swing.JToggleButton();
        jToggleButtonPOSCordinatingConjuction = new javax.swing.JToggleButton();
        jToggleButtonKaanaAndSisters = new javax.swing.JToggleButton();
        jToggleButtonPOSEnnaAndSisters = new javax.swing.JToggleButton();
        jToggleButtonTharfMakan = new javax.swing.JToggleButton();
        jToggleButtonTharfZaman = new javax.swing.JToggleButton();
        jToggleButtonPOSPrepositionFEE = new javax.swing.JToggleButton();
        jToggleButtonPOSPrepositionALA = new javax.swing.JToggleButton();
        jToggleButtonPOSPrepositinoElA = new javax.swing.JToggleButton();
        jToggleButtonPOSPrepositinoMEN = new javax.swing.JToggleButton();
        jTogglePOSPrepositionHATTA = new javax.swing.JToggleButton();
        jTogglePOSParticleMATA = new javax.swing.JToggleButton();
        jToggleButtonPOSParticleAN = new javax.swing.JToggleButton();
        jToggleButtonPOSParticleLN = new javax.swing.JToggleButton();
        jToggleButtonPOSParticleKAI = new javax.swing.JToggleButton();
        jToggleButtonPOSParticleYAA = new javax.swing.JToggleButton();
        jToggleButtonParticleLAA = new javax.swing.JToggleButton();
        jToggleButtonParticleLAM = new javax.swing.JToggleButton();
        jPanelPrefix = new javax.swing.JPanel();
        jToggleButtonPrefixParticleWA = new javax.swing.JToggleButton();
        jToggleButtonPrefixParticleFA = new javax.swing.JToggleButton();
        jToggleButtonPrefixPrepositionBI = new javax.swing.JToggleButton();
        jToggleButtonPrefixPrepositionLI = new javax.swing.JToggleButton();
        jToggleButtonPrefixPrepositionKA = new javax.swing.JToggleButton();
        jToggleButtonPrefixParticleSA = new javax.swing.JToggleButton();
        jToggleButtonPrefixParticleAL = new javax.swing.JToggleButton();
        jPanelSuffix = new javax.swing.JPanel();
        jToggleButtonSuffixSSM = new javax.swing.JToggleButton();
        jToggleButtonSuffixSDM = new javax.swing.JToggleButton();
        jToggleButtonSuffixSGM = new javax.swing.JToggleButton();
        jToggleButtonSuffixSSF = new javax.swing.JToggleButton();
        jToggleButtonSuffixSDF = new javax.swing.JToggleButton();
        jToggleButtonSuffixSGF = new javax.swing.JToggleButton();
        jToggleButtonSuffixOSM = new javax.swing.JToggleButton();
        jToggleButtonSuffixODM = new javax.swing.JToggleButton();
        jToggleButtonSuffixOGM = new javax.swing.JToggleButton();
        jToggleButtonSuffixOSF = new javax.swing.JToggleButton();
        jToggleButtonSuffixODF = new javax.swing.JToggleButton();
        jToggleButtonSuffixOGF = new javax.swing.JToggleButton();
        jToggleButtonSuffixPSM = new javax.swing.JToggleButton();
        jToggleButtonSuffixPDM = new javax.swing.JToggleButton();
        jToggleButtonSuffixPGM = new javax.swing.JToggleButton();
        jToggleButtonSuffixPSF = new javax.swing.JToggleButton();
        jToggleButtonSuffixPDF = new javax.swing.JToggleButton();
        jToggleButtonSuffixPGF = new javax.swing.JToggleButton();
        jPanelVoice = new javax.swing.JPanel();
        jToggleButton1stVoice = new javax.swing.JToggleButton();
        jToggleButton2ndVoice = new javax.swing.JToggleButton();
        jToggleButton3rdVoice = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("JFrameMain"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        CMDFirstSentence.setText("<<");
        CMDFirstSentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDFirstSentenceActionPerformed(evt);
            }
        });
        getContentPane().add(CMDFirstSentence, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 400, 50, -1));

        CMDLastSentence.setText(">>");
        CMDLastSentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDLastSentenceActionPerformed(evt);
            }
        });
        getContentPane().add(CMDLastSentence, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 400, -1, -1));

        CMDPreviousSentence.setText("<");
        CMDPreviousSentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDPreviousSentenceActionPerformed(evt);
            }
        });
        getContentPane().add(CMDPreviousSentence, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 400, 50, -1));

        CMDNextSentence.setText(">");
        CMDNextSentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDNextSentenceActionPerformed(evt);
            }
        });
        getContentPane().add(CMDNextSentence, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 400, 50, -1));

        jLabel9.setForeground(new java.awt.Color(153, 153, 153));
        jLabel9.setText("Id");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 70, 50, -1));

        jLabel11.setForeground(new java.awt.Color(153, 153, 153));
        jLabel11.setText("Sentence Id");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 100, 100, -1));

        jTextSCId.setEditable(false);
        jTextSCId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(jTextSCId, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 70, 103, -1));

        jTextSCSentenceId.setEditable(false);
        jTextSCSentenceId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(jTextSCSentenceId, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 100, 253, -1));

        jLabel12.setForeground(new java.awt.Color(153, 153, 153));
        jLabel12.setText("Sequence Number");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 130, 130, -1));

        jTextConceptSequenceNumber.setEditable(false);
        jTextConceptSequenceNumber.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(jTextConceptSequenceNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 130, 253, -1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(153, 153, 153));
        jLabel13.setText("Concept Id");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 160, 100, -1));

        jTextPatternId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(jTextPatternId, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 510, 150, -1));

        jLabel22.setText("Pattern Id");
        getContentPane().add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 510, 130, -1));

        jLabelArgument1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelArgument1.setText("Argument 1");
        getContentPane().add(jLabelArgument1, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 480, 130, -1));

        jTextArgument1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextArgument1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextArgument1MouseClicked(evt);
            }
        });
        getContentPane().add(jTextArgument1, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 480, 150, -1));

        jTextArgument2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextArgument2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextArgument2MouseClicked(evt);
            }
        });
        getContentPane().add(jTextArgument2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 480, 150, -1));

        jLabelArgument2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelArgument2.setText("Argument 2");
        getContentPane().add(jLabelArgument2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 480, -1, -1));

        jLabel18.setText("Implicit");
        getContentPane().add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 510, -1, -1));

        CBConceptCompositeLevelId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(CBConceptCompositeLevelId, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 540, 150, -1));

        jLabel19.setText("Composite Level");
        getContentPane().add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 540, 130, -1));

        jLabel20.setText("Negation");
        getContentPane().add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 540, -1, -1));

        jLabel16.setText("Note");
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 570, 60, -1));

        jTANote.setColumns(20);
        jTANote.setFont(new java.awt.Font("Courier New", 1, 12)); // NOI18N
        jTANote.setRows(5);
        jScrollPane2.setViewportView(jTANote);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 570, 340, 70));
        getContentPane().add(jCheckBoxImplicit, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 510, -1, -1));

        CMDFirstSC.setText("<<");
        CMDFirstSC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDFirstSCActionPerformed(evt);
            }
        });
        getContentPane().add(CMDFirstSC, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 640, 50, -1));

        CMDLastSC.setText(">>");
        CMDLastSC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDLastSCActionPerformed(evt);
            }
        });
        getContentPane().add(CMDLastSC, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 640, -1, -1));

        CMDPreviousSC.setText("<");
        CMDPreviousSC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDPreviousSCActionPerformed(evt);
            }
        });
        getContentPane().add(CMDPreviousSC, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 640, 50, -1));

        CMDNextSC.setText(">");
        CMDNextSC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDNextSCActionPerformed(evt);
            }
        });
        getContentPane().add(CMDNextSC, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 640, 50, -1));

        jLabelOntologyStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelOntologyStatus.setForeground(new java.awt.Color(255, 51, 51));
        jLabelOntologyStatus.setText("No OWL Ontology Selected...");
        getContentPane().add(jLabelOntologyStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 20, 680, 20));

        CmdClose.setText("Close Form");
        CmdClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdCloseActionPerformed(evt);
            }
        });
        getContentPane().add(CmdClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, 140, 30));

        CmdSelectOntology.setText("1 - Select Ontology");
        CmdSelectOntology.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdSelectOntologyActionPerformed(evt);
            }
        });
        getContentPane().add(CmdSelectOntology, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 140, 30));

        CmdRefreshDB.setText("2 - Refresh Tables");
        CmdRefreshDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdRefreshDBActionPerformed(evt);
            }
        });
        getContentPane().add(CmdRefreshDB, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, 140, 30));

        jTableConceptsList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Concept", "Category", "Arg 1 Class", "Arg 2 Class", "Parent Class"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableConceptsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableConceptsListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableConceptsList);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 190, 590, 280));

        jLabelSelectedConcept.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelSelectedConcept.setForeground(new java.awt.Color(0, 153, 51));
        jLabelSelectedConcept.setText("...");
        getContentPane().add(jLabelSelectedConcept, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 160, 160, -1));
        getContentPane().add(jCheckBoxNegation, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 540, -1, -1));

        jPanelPOSTags.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelPOSTags.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextAreaCorrectedTextAndPOS.setColumns(20);
        jTextAreaCorrectedTextAndPOS.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextAreaCorrectedTextAndPOS.setLineWrap(true);
        jTextAreaCorrectedTextAndPOS.setRows(4);
        jTextAreaCorrectedTextAndPOS.setWrapStyleWord(true);
        jTextAreaCorrectedTextAndPOS.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextAreaCorrectedTextAndPOSCaretUpdate(evt);
            }
        });
        jScrollPane4.setViewportView(jTextAreaCorrectedTextAndPOS);

        jPanelPOSTags.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 610, 80));

        jTextAreaSemanticTextandPOS.setColumns(20);
        jTextAreaSemanticTextandPOS.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextAreaSemanticTextandPOS.setLineWrap(true);
        jTextAreaSemanticTextandPOS.setRows(4);
        jTextAreaSemanticTextandPOS.setWrapStyleWord(true);
        jScrollPane6.setViewportView(jTextAreaSemanticTextandPOS);

        jPanelPOSTags.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 610, 80));

        jTextAreaExpandedTextandPOS.setColumns(20);
        jTextAreaExpandedTextandPOS.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextAreaExpandedTextandPOS.setLineWrap(true);
        jTextAreaExpandedTextandPOS.setRows(4);
        jTextAreaExpandedTextandPOS.setWrapStyleWord(true);
        jScrollPane7.setViewportView(jTextAreaExpandedTextandPOS);

        jPanelPOSTags.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 610, 80));

        jLabelEnd.setText("Corrected Text and POS");
        jLabelEnd.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanelPOSTags.add(jLabelEnd, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, 90, 20));

        jLabel26.setText("Expanded POS");
        jPanelPOSTags.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 130, -1));

        jLabel27.setText("Semantic POS");
        jPanelPOSTags.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 90, -1));

        jLabel28.setText("Corrected Text and POS");
        jLabel28.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanelPOSTags.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 160, 20));

        jLabelStart.setText("Corrected Text and POS");
        jLabelStart.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanelPOSTags.add(jLabelStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 90, 20));

        jTabbedPane.addTab("POS Tags", jPanelPOSTags);

        jLabel10.setText("Corrected Parse Tree");

        jTextCorrectedParseTree.setColumns(20);
        jTextCorrectedParseTree.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextCorrectedParseTree.setRows(5);
        jTextCorrectedParseTree.setWrapStyleWord(true);
        jScrollPane5.setViewportView(jTextCorrectedParseTree);

        jLabel8.setForeground(new java.awt.Color(153, 153, 153));
        jLabel8.setText("Parse Tree");

        jTextParseTree.setEditable(false);
        jTextParseTree.setColumns(20);
        jTextParseTree.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextParseTree.setRows(5);
        jTextParseTree.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextParseTree);

        javax.swing.GroupLayout jPanelParseTreesLayout = new javax.swing.GroupLayout(jPanelParseTrees);
        jPanelParseTrees.setLayout(jPanelParseTreesLayout);
        jPanelParseTreesLayout.setHorizontalGroup(
            jPanelParseTreesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelParseTreesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelParseTreesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelParseTreesLayout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                        .addGap(382, 382, 382))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelParseTreesLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(jPanelParseTreesLayout.createSequentialGroup()
                        .addComponent(jScrollPane5)
                        .addGap(10, 10, 10))
                    .addGroup(jPanelParseTreesLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanelParseTreesLayout.setVerticalGroup(
            jPanelParseTreesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelParseTreesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane.addTab("Parse Trees", jPanelParseTrees);

        jLabel21.setForeground(new java.awt.Color(153, 153, 153));
        jLabel21.setText("Id");

        jTextSentenceId.setEditable(false);
        jTextSentenceId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel1.setForeground(new java.awt.Color(153, 153, 153));
        jLabel1.setText("Story Id");

        jTextStoryId.setEditable(false);
        jTextStoryId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel2.setForeground(new java.awt.Color(153, 153, 153));
        jLabel2.setText("Line Number");

        jTextLineNumber.setEditable(false);
        jTextLineNumber.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jTextTextOnly.setEditable(false);
        jTextTextOnly.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextTextOnly.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextTextOnlyMouseClicked(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(153, 153, 153));
        jLabel3.setText("Text Only");

        jLabel4.setForeground(new java.awt.Color(153, 153, 153));
        jLabel4.setText("Text and POS");

        jTextTextAndPOS.setEditable(false);
        jTextTextAndPOS.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        javax.swing.GroupLayout jPanelOtherInfoLayout = new javax.swing.GroupLayout(jPanelOtherInfo);
        jPanelOtherInfo.setLayout(jPanelOtherInfoLayout);
        jPanelOtherInfoLayout.setHorizontalGroup(
            jPanelOtherInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOtherInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelOtherInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelOtherInfoLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel21)
                        .addGap(10, 10, 10)
                        .addComponent(jTextSentenceId, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jTextStoryId, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jTextLineNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelOtherInfoLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jTextTextOnly, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelOtherInfoLayout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(jTextTextAndPOS, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanelOtherInfoLayout.setVerticalGroup(
            jPanelOtherInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOtherInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelOtherInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21)
                    .addComponent(jTextSentenceId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jTextStoryId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jTextLineNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanelOtherInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jTextTextOnly, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanelOtherInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jPanelOtherInfoLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jTextTextAndPOS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(240, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Other Info", jPanelOtherInfo);

        getContentPane().add(jTabbedPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 620, 360));
        getContentPane().add(jFileChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 600, 50, 30));

        jTabbedPane_POS.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jToggleButtonPOSNoun.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSNoun.setText("Noun");
        jToggleButtonPOSNoun.setToolTipText("اسم");
        jToggleButtonPOSNoun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSNounActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSNoun);

        jToggleButtonPOSAdjective.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSAdjective.setText("Adjective");
        jToggleButtonPOSAdjective.setToolTipText("صفة");
        jToggleButtonPOSAdjective.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSAdjectiveActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSAdjective);

        jToggleButtonPOSAdverb.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSAdverb.setText("Adverb");
        jToggleButtonPOSAdverb.setToolTipText("حال");
        jToggleButtonPOSAdverb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSAdverbActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSAdverb);

        jToggleButtonPOSVerbGeneral.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSVerbGeneral.setText("Verb General");
        jToggleButtonPOSVerbGeneral.setToolTipText("فعل");
        jToggleButtonPOSVerbGeneral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSVerbGeneralActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSVerbGeneral);

        jToggleButtonPOSVerbPast.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSVerbPast.setText("Verb Past");
        jToggleButtonPOSVerbPast.setToolTipText("فعل ماضي");
        jToggleButtonPOSVerbPast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSVerbPastActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSVerbPast);

        jToggleButtonPOSVerbPresent.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSVerbPresent.setText("Verb Present");
        jToggleButtonPOSVerbPresent.setToolTipText("فعل مضارع");
        jToggleButtonPOSVerbPresent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSVerbPresentActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSVerbPresent);

        jToggleButtonPOSGerund.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSGerund.setText("Gerund");
        jToggleButtonPOSGerund.setToolTipText("مصدر");
        jToggleButtonPOSGerund.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSGerundActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSGerund);

        jToggleButtonPOSPronoun.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSPronoun.setText("Pronoun");
        jToggleButtonPOSPronoun.setToolTipText("اسم اشارة");
        jToggleButtonPOSPronoun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSPronounActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSPronoun);

        jToggleButtonPOSProperName.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSProperName.setText("Proper Name");
        jToggleButtonPOSProperName.setToolTipText("اسم عاقل");
        jToggleButtonPOSProperName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSProperNameActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSProperName);

        jToggleButtonPOSPreposition.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSPreposition.setText("Preposition");
        jToggleButtonPOSPreposition.setToolTipText("حرف جر");
        jToggleButtonPOSPreposition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSPrepositionActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSPreposition);

        jToggleButtonPOSParticle.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSParticle.setText("Particle");
        jToggleButtonPOSParticle.setToolTipText("حرف");
        jToggleButtonPOSParticle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSParticleActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSParticle);

        jToggleButtonPOSCordinatingConjuction.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSCordinatingConjuction.setText("Cordinating Conjunction");
        jToggleButtonPOSCordinatingConjuction.setToolTipText("حرف عطف");
        jToggleButtonPOSCordinatingConjuction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSCordinatingConjuctionActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSCordinatingConjuction);

        jToggleButtonKaanaAndSisters.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonKaanaAndSisters.setText("Kaana and Sisters");
        jToggleButtonKaanaAndSisters.setToolTipText("كان واخواتها");
        jToggleButtonKaanaAndSisters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonKaanaAndSistersActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonKaanaAndSisters);

        jToggleButtonPOSEnnaAndSisters.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSEnnaAndSisters.setText("Enna and Sisters");
        jToggleButtonPOSEnnaAndSisters.setToolTipText("ان واخواتها");
        jToggleButtonPOSEnnaAndSisters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSEnnaAndSistersActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSEnnaAndSisters);

        jToggleButtonTharfMakan.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonTharfMakan.setText("Tharf Makan-TH_TM");
        jToggleButtonTharfMakan.setToolTipText("ظرف مكان");
        jToggleButtonTharfMakan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonTharfMakanActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonTharfMakan);

        jToggleButtonTharfZaman.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonTharfZaman.setText("Tharf Zaman-TH_TZ");
        jToggleButtonTharfZaman.setToolTipText("ظرف زمان");
        jToggleButtonTharfZaman.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonTharfZamanActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonTharfZaman);

        jToggleButtonPOSPrepositionFEE.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSPrepositionFEE.setText("Preposition FEE");
        jToggleButtonPOSPrepositionFEE.setToolTipText("حرف الجر في");
        jToggleButtonPOSPrepositionFEE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSPrepositionFEEActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSPrepositionFEE);

        jToggleButtonPOSPrepositionALA.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSPrepositionALA.setText("Preposition ALA");
        jToggleButtonPOSPrepositionALA.setToolTipText("حرف الجر على");
        jToggleButtonPOSPrepositionALA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSPrepositionALAActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSPrepositionALA);

        jToggleButtonPOSPrepositinoElA.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSPrepositinoElA.setText("Preposition ELA");
        jToggleButtonPOSPrepositinoElA.setToolTipText("حرف الجر الى");
        jToggleButtonPOSPrepositinoElA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSPrepositinoElAActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSPrepositinoElA);

        jToggleButtonPOSPrepositinoMEN.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSPrepositinoMEN.setText("Preposition MEN");
        jToggleButtonPOSPrepositinoMEN.setToolTipText("حرف الجر من");
        jToggleButtonPOSPrepositinoMEN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSPrepositinoMENActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSPrepositinoMEN);

        jTogglePOSPrepositionHATTA.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jTogglePOSPrepositionHATTA.setText("Preposition HATTA");
        jTogglePOSPrepositionHATTA.setToolTipText("حرف الجر حتى");
        jTogglePOSPrepositionHATTA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTogglePOSPrepositionHATTAActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jTogglePOSPrepositionHATTA);

        jTogglePOSParticleMATA.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jTogglePOSParticleMATA.setText("Particle MATA");
        jTogglePOSParticleMATA.setToolTipText("حرف الجر متى");
        jTogglePOSParticleMATA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTogglePOSParticleMATAActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jTogglePOSParticleMATA);

        jToggleButtonPOSParticleAN.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSParticleAN.setText("Particle AN");
        jToggleButtonPOSParticleAN.setToolTipText("حرف الجر كي");
        jToggleButtonPOSParticleAN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSParticleANActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSParticleAN);

        jToggleButtonPOSParticleLN.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSParticleLN.setText("Particle LN");
        jToggleButtonPOSParticleLN.setToolTipText("حرف الجر كي");
        jToggleButtonPOSParticleLN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSParticleLNActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSParticleLN);

        jToggleButtonPOSParticleKAI.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSParticleKAI.setText("Particle KAI");
        jToggleButtonPOSParticleKAI.setToolTipText("حرف الجر كي");
        jToggleButtonPOSParticleKAI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSParticleKAIActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSParticleKAI);

        jToggleButtonPOSParticleYAA.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPOSParticleYAA.setText("Particle YAA");
        jToggleButtonPOSParticleYAA.setToolTipText("ياء الداء");
        jToggleButtonPOSParticleYAA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPOSParticleYAAActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonPOSParticleYAA);

        jToggleButtonParticleLAA.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonParticleLAA.setText("Particle LAA");
        jToggleButtonParticleLAA.setToolTipText("لا النهي");
        jToggleButtonParticleLAA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonParticleLAAActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonParticleLAA);

        jToggleButtonParticleLAM.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonParticleLAM.setText("Particle LAA");
        jToggleButtonParticleLAM.setToolTipText("لا النهي");
        jToggleButtonParticleLAM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonParticleLAMActionPerformed(evt);
            }
        });
        jPanelPennPOS.add(jToggleButtonParticleLAM);

        jTabbedPane_POS.addTab("Base Form", jPanelPennPOS);

        jToggleButtonPrefixParticleWA.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPrefixParticleWA.setText("Particle WA");
        jToggleButtonPrefixParticleWA.setToolTipText("واو العطف");
        jToggleButtonPrefixParticleWA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPrefixParticleWAActionPerformed(evt);
            }
        });
        jPanelPrefix.add(jToggleButtonPrefixParticleWA);

        jToggleButtonPrefixParticleFA.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPrefixParticleFA.setText("Particle FA");
        jToggleButtonPrefixParticleFA.setToolTipText("فاء السببية");
        jToggleButtonPrefixParticleFA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPrefixParticleFAActionPerformed(evt);
            }
        });
        jPanelPrefix.add(jToggleButtonPrefixParticleFA);

        jToggleButtonPrefixPrepositionBI.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPrefixPrepositionBI.setText("Preposition BI");
        jToggleButtonPrefixPrepositionBI.setToolTipText("حرف الجر بـ");
        jToggleButtonPrefixPrepositionBI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPrefixPrepositionBIActionPerformed(evt);
            }
        });
        jPanelPrefix.add(jToggleButtonPrefixPrepositionBI);

        jToggleButtonPrefixPrepositionLI.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPrefixPrepositionLI.setText("Preposition LI");
        jToggleButtonPrefixPrepositionLI.setToolTipText("حرف الجر لـ");
        jToggleButtonPrefixPrepositionLI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPrefixPrepositionLIActionPerformed(evt);
            }
        });
        jPanelPrefix.add(jToggleButtonPrefixPrepositionLI);

        jToggleButtonPrefixPrepositionKA.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPrefixPrepositionKA.setText("Preposition KA");
        jToggleButtonPrefixPrepositionKA.setToolTipText("حرف الجر كـ");
        jToggleButtonPrefixPrepositionKA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPrefixPrepositionKAActionPerformed(evt);
            }
        });
        jPanelPrefix.add(jToggleButtonPrefixPrepositionKA);

        jToggleButtonPrefixParticleSA.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPrefixParticleSA.setText("Praticle SA");
        jToggleButtonPrefixParticleSA.setToolTipText("حرف الجر كـ");
        jToggleButtonPrefixParticleSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPrefixParticleSAActionPerformed(evt);
            }
        });
        jPanelPrefix.add(jToggleButtonPrefixParticleSA);

        jToggleButtonPrefixParticleAL.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonPrefixParticleAL.setText("Particle Al");
        jToggleButtonPrefixParticleAL.setToolTipText("ال التعريف");
        jToggleButtonPrefixParticleAL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPrefixParticleALActionPerformed(evt);
            }
        });
        jPanelPrefix.add(jToggleButtonPrefixParticleAL);

        jTabbedPane_POS.addTab("Prefix", jPanelPrefix);

        jToggleButtonSuffixSSM.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonSuffixSSM.setText("Subject Single Masculine");
        jToggleButtonSuffixSSM.setToolTipText("تعود الى الملكبة");
        jToggleButtonSuffixSSM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSuffixSSMActionPerformed(evt);
            }
        });
        jPanelSuffix.add(jToggleButtonSuffixSSM);

        jToggleButtonSuffixSDM.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonSuffixSDM.setText("Subject Dual Masculine");
        jToggleButtonSuffixSDM.setToolTipText("تعود الى الملكبة");
        jToggleButtonSuffixSDM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSuffixSDMActionPerformed(evt);
            }
        });
        jPanelSuffix.add(jToggleButtonSuffixSDM);

        jToggleButtonSuffixSGM.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonSuffixSGM.setText("Subject Group Masculine");
        jToggleButtonSuffixSGM.setToolTipText("تعود الى الملكبة");
        jToggleButtonSuffixSGM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSuffixSGMActionPerformed(evt);
            }
        });
        jPanelSuffix.add(jToggleButtonSuffixSGM);

        jToggleButtonSuffixSSF.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonSuffixSSF.setText("Subject Single Feminine");
        jToggleButtonSuffixSSF.setToolTipText("تعود الى الملكبة");
        jToggleButtonSuffixSSF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSuffixSSFActionPerformed(evt);
            }
        });
        jPanelSuffix.add(jToggleButtonSuffixSSF);

        jToggleButtonSuffixSDF.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonSuffixSDF.setText("Subject Dual Feminine");
        jToggleButtonSuffixSDF.setToolTipText("تعود الى الملكبة");
        jToggleButtonSuffixSDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSuffixSDFActionPerformed(evt);
            }
        });
        jPanelSuffix.add(jToggleButtonSuffixSDF);

        jToggleButtonSuffixSGF.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonSuffixSGF.setText("Subject Group Feminine");
        jToggleButtonSuffixSGF.setToolTipText("تعود الى الملكبة");
        jToggleButtonSuffixSGF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSuffixSGFActionPerformed(evt);
            }
        });
        jPanelSuffix.add(jToggleButtonSuffixSGF);

        jToggleButtonSuffixOSM.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonSuffixOSM.setText("Object Single Masculine");
        jToggleButtonSuffixOSM.setToolTipText("تعود الى الملكبة");
        jToggleButtonSuffixOSM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSuffixOSMActionPerformed(evt);
            }
        });
        jPanelSuffix.add(jToggleButtonSuffixOSM);

        jToggleButtonSuffixODM.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonSuffixODM.setText("Object Dual Masculine");
        jToggleButtonSuffixODM.setToolTipText("تعود الى الملكبة");
        jToggleButtonSuffixODM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSuffixODMActionPerformed(evt);
            }
        });
        jPanelSuffix.add(jToggleButtonSuffixODM);

        jToggleButtonSuffixOGM.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonSuffixOGM.setText("Object Group Masculine");
        jToggleButtonSuffixOGM.setToolTipText("تعود الى الملكبة");
        jToggleButtonSuffixOGM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSuffixOGMActionPerformed(evt);
            }
        });
        jPanelSuffix.add(jToggleButtonSuffixOGM);

        jToggleButtonSuffixOSF.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonSuffixOSF.setText("Object Single Feminine");
        jToggleButtonSuffixOSF.setToolTipText("تعود الى الملكبة");
        jToggleButtonSuffixOSF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSuffixOSFActionPerformed(evt);
            }
        });
        jPanelSuffix.add(jToggleButtonSuffixOSF);

        jToggleButtonSuffixODF.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonSuffixODF.setText("Object Dual Feminine");
        jToggleButtonSuffixODF.setToolTipText("تعود الى الملكبة");
        jToggleButtonSuffixODF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSuffixODFActionPerformed(evt);
            }
        });
        jPanelSuffix.add(jToggleButtonSuffixODF);

        jToggleButtonSuffixOGF.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonSuffixOGF.setText("Object Group Feminine");
        jToggleButtonSuffixOGF.setToolTipText("تعود الى الملكبة");
        jToggleButtonSuffixOGF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSuffixOGFActionPerformed(evt);
            }
        });
        jPanelSuffix.add(jToggleButtonSuffixOGF);

        jToggleButtonSuffixPSM.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonSuffixPSM.setText("Possession Single Masculine");
        jToggleButtonSuffixPSM.setToolTipText("تعود الى الملكبة");
        jToggleButtonSuffixPSM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSuffixPSMActionPerformed(evt);
            }
        });
        jPanelSuffix.add(jToggleButtonSuffixPSM);

        jToggleButtonSuffixPDM.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonSuffixPDM.setText("Possession Dual Masculine");
        jToggleButtonSuffixPDM.setToolTipText("تعود الى الملكبة");
        jToggleButtonSuffixPDM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSuffixPDMActionPerformed(evt);
            }
        });
        jPanelSuffix.add(jToggleButtonSuffixPDM);

        jToggleButtonSuffixPGM.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonSuffixPGM.setText("Possession Group Masculine");
        jToggleButtonSuffixPGM.setToolTipText("تعود الى الملكبة");
        jToggleButtonSuffixPGM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSuffixPGMActionPerformed(evt);
            }
        });
        jPanelSuffix.add(jToggleButtonSuffixPGM);

        jToggleButtonSuffixPSF.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonSuffixPSF.setText("Possession Single Feminine");
        jToggleButtonSuffixPSF.setToolTipText("تعود الى الملكبة");
        jToggleButtonSuffixPSF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSuffixPSFActionPerformed(evt);
            }
        });
        jPanelSuffix.add(jToggleButtonSuffixPSF);

        jToggleButtonSuffixPDF.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonSuffixPDF.setText("Possession Dual Feminine");
        jToggleButtonSuffixPDF.setToolTipText("تعود الى الملكبة");
        jToggleButtonSuffixPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSuffixPDFActionPerformed(evt);
            }
        });
        jPanelSuffix.add(jToggleButtonSuffixPDF);

        jToggleButtonSuffixPGF.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButtonSuffixPGF.setText("Possession Group Feminine");
        jToggleButtonSuffixPGF.setToolTipText("تعود الى الملكبة");
        jToggleButtonSuffixPGF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSuffixPGFActionPerformed(evt);
            }
        });
        jPanelSuffix.add(jToggleButtonSuffixPGF);

        jTabbedPane_POS.addTab("Suffix", jPanelSuffix);

        jToggleButton1stVoice.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButton1stVoice.setText("1st");
        jToggleButton1stVoice.setToolTipText("First Voice");
        jToggleButton1stVoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1stVoiceActionPerformed(evt);
            }
        });
        jPanelVoice.add(jToggleButton1stVoice);

        jToggleButton2ndVoice.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButton2ndVoice.setText("2nd");
        jToggleButton2ndVoice.setToolTipText("Second Voice");
        jToggleButton2ndVoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ndVoiceActionPerformed(evt);
            }
        });
        jPanelVoice.add(jToggleButton2ndVoice);

        jToggleButton3rdVoice.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jToggleButton3rdVoice.setText("3rd");
        jToggleButton3rdVoice.setToolTipText("Third Voice");
        jToggleButton3rdVoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3rdVoiceActionPerformed(evt);
            }
        });
        jPanelVoice.add(jToggleButton3rdVoice);

        jTabbedPane_POS.addTab("Voice", jPanelVoice);

        getContentPane().add(jTabbedPane_POS, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 430, 640, 210));

        pack();
    }// </editor-fold>                        

    private void CMDNextSentenceActionPerformed(java.awt.event.ActionEvent evt) {                                                

        try {
            dacSentence.SaveRecord(GetDisplayedSentenceRecord());
            DisplaySentenceRecord(dacSentence.MoveRecord(EnumRecordMovementDirection.Next));
            RefreshSentenceConceptResultSet();
        } catch (SQLException ex) {
            Logger.getLogger(AnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                               

    private void CMDPreviousSentenceActionPerformed(java.awt.event.ActionEvent evt) {                                                    

        try {
            dacSentence.SaveRecord(GetDisplayedSentenceRecord());
            DisplaySentenceRecord(dacSentence.MoveRecord(EnumRecordMovementDirection.Previous));
            RefreshSentenceConceptResultSet();
        } catch (SQLException ex) {
            Logger.getLogger(AnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                                   

    private void CMDLastSentenceActionPerformed(java.awt.event.ActionEvent evt) {                                                
        try {
            dacSentence.SaveRecord(GetDisplayedSentenceRecord());
            DisplaySentenceRecord(dacSentence.MoveRecord(EnumRecordMovementDirection.Last));
            RefreshSentenceConceptResultSet();
        } catch (SQLException ex) {
            Logger.getLogger(AnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                               

    private void CMDFirstSentenceActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        try {
            dacSentence.SaveRecord(GetDisplayedSentenceRecord());
            DisplaySentenceRecord(dacSentence.MoveRecord(EnumRecordMovementDirection.First));
            RefreshSentenceConceptResultSet();
        } catch (SQLException ex) {
            Logger.getLogger(AnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                                

    private void CMDFirstSCActionPerformed(java.awt.event.ActionEvent evt) {                                           

        try {
            //Save the record if there is valid data
            if (SentenceConceptDataIsValid()) {
                dacSentenceConcept.SaveRecord(GetDisplayedSCRecord());
            }
            DisplaySentenceConceptRecord(dacSentenceConcept.MoveRecord(EnumRecordMovementDirection.First));
        } catch (SQLException ex) {
            Logger.getLogger(AnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                          

    private void CMDLastSCActionPerformed(java.awt.event.ActionEvent evt) {                                          
        try {
            //Save the record if there is valid data
            if (SentenceConceptDataIsValid()) {
                dacSentenceConcept.SaveRecord(GetDisplayedSCRecord());
            }
            DisplaySentenceConceptRecord(dacSentenceConcept.MoveRecord(EnumRecordMovementDirection.Last));
        } catch (SQLException ex) {
            Logger.getLogger(AnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                         

    private void CMDPreviousSCActionPerformed(java.awt.event.ActionEvent evt) {                                              

        try {
            //Save the record if there is valid data
            if (SentenceConceptDataIsValid()) {
                dacSentenceConcept.SaveRecord(GetDisplayedSCRecord());
            }
            DisplaySentenceConceptRecord(dacSentenceConcept.MoveRecord(EnumRecordMovementDirection.Previous));
        } catch (SQLException ex) {
            Logger.getLogger(AnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                             

    private void CMDNextSCActionPerformed(java.awt.event.ActionEvent evt) {                                          

        try {
            //Save the record if there is valid data
            if (SentenceConceptDataIsValid()) {
                dacSentenceConcept.SaveRecord(GetDisplayedSCRecord());
            }
            DisplaySentenceConceptRecord(dacSentenceConcept.MoveRecord(EnumRecordMovementDirection.Next));
        } catch (SQLException ex) {
            Logger.getLogger(AnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                         

    private void CmdSelectOntologyActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        jFileChooser.setCurrentDirectory(new File("D:\\Google Drive\\University\\Thesis\\PHD Research\\My Ontologies\\"));
        int returnVal = jFileChooser.showOpenDialog(this);

        if (JFileChooser.APPROVE_OPTION == returnVal) {

            jLabelOntologyStatus.setText("Ontology Selected: " + jFileChooser.getSelectedFile().getAbsolutePath());
            jLabelOntologyStatus.setForeground(Color.BLACK);

            PopulateConceptTable(jFileChooser.getSelectedFile().getAbsolutePath());
        }
    }                                                 

    private void CmdCloseActionPerformed(java.awt.event.ActionEvent evt) {                                         
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }                                        

    private void CmdRefreshDBActionPerformed(java.awt.event.ActionEvent evt) {                                             
        try {
            if (dacSentence != null) {
                dacSentence.Dispose();
            }
            if (dacSentenceConcept != null) {
                dacSentenceConcept.Dispose();
            }

            dacSentence = new DACSentence();
            dacSentence.InitializeRowSet();
            DisplaySentenceRecord(dacSentence.GetCurrentRecord());

            dacSentenceConcept = new DACSentenceConcept();

            RefreshSentenceConceptResultSet();
            ResetAllToggleButtons(jTabbedPane_POS);
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(AnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                            

    private void jTableConceptsListMouseClicked(java.awt.event.MouseEvent evt) {                                                
        ChangeConceptArgumentsSettings();
    }                                               

    private void jTextTextOnlyMouseClicked(java.awt.event.MouseEvent evt) {                                           
        StringSelection stringSelection = new StringSelection(jTextTextOnly.getSelectedText());
        clipBoard.setContents(stringSelection, null);
    }                                          

    private void jTextArgument1MouseClicked(java.awt.event.MouseEvent evt) {                                            
//        try {
//            jTextArgument1.setText((String) clipBoard.getData(DataFlavor.stringFlavor));
//        } catch (UnsupportedFlavorException | IOException ex) {
//            Logger.getLogger(AnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }                                           

    private void jTextArgument2MouseClicked(java.awt.event.MouseEvent evt) {                                            
//           try {
//            jTextArgument2.setText((String) clipBoard.getData(DataFlavor.stringFlavor));
//        } catch (UnsupportedFlavorException | IOException ex) {
//            Logger.getLogger(AnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }                                           

    private void jToggleButtonPOSEnnaAndSistersActionPerformed(java.awt.event.ActionEvent evt) {                                                               
        UpdateAnnotation();
    }                                                              

    private void jToggleButtonPOSParticleYAAActionPerformed(java.awt.event.ActionEvent evt) {                                                            
        UpdateAnnotation();
    }                                                           

    private void jToggleButtonPOSPrepositionActionPerformed(java.awt.event.ActionEvent evt) {                                                            
        UpdateAnnotation();
    }                                                           

    private void jToggleButtonPOSProperNameActionPerformed(java.awt.event.ActionEvent evt) {                                                           
        UpdateAnnotation();
    }                                                          

    private void jToggleButtonPOSPronounActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        UpdateAnnotation();
    }                                                       

    private void jToggleButtonPOSVerbPresentActionPerformed(java.awt.event.ActionEvent evt) {                                                            
        UpdateAnnotation();
    }                                                           

    private void jToggleButtonPOSVerbPastActionPerformed(java.awt.event.ActionEvent evt) {                                                         
        UpdateAnnotation();
    }                                                        

    private void jToggleButtonPOSVerbGeneralActionPerformed(java.awt.event.ActionEvent evt) {                                                            
        UpdateAnnotation();
    }                                                           

    private void jToggleButtonPOSAdjectiveActionPerformed(java.awt.event.ActionEvent evt) {                                                          
        UpdateAnnotation();
    }                                                         

    private void jToggleButtonPOSAdverbActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButtonPOSGerundActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButtonPOSNounActionPerformed(java.awt.event.ActionEvent evt) {                                                     
//        if (((javax.swing.JToggleButton) (evt.getSource())).isSelected()) {
//            ResetPOSToggleButtons(this);
//            ((javax.swing.JToggleButton) (evt.getSource())).setSelected(true);
//        }

        UpdateAnnotation();
    }                                                    

    private void jTogglePOSPrepositionHATTAActionPerformed(java.awt.event.ActionEvent evt) {                                                           
        UpdateAnnotation();
    }                                                          

    private void jToggleButtonPOSPrepositinoMENActionPerformed(java.awt.event.ActionEvent evt) {                                                               
        UpdateAnnotation();
    }                                                              

    private void jToggleButtonPOSPrepositionFEEActionPerformed(java.awt.event.ActionEvent evt) {                                                               
        UpdateAnnotation();
    }                                                              

    private void jToggleButtonPOSParticleActionPerformed(java.awt.event.ActionEvent evt) {                                                         
        UpdateAnnotation();
    }                                                        

    private void jToggleButtonPOSCordinatingConjuctionActionPerformed(java.awt.event.ActionEvent evt) {                                                                      
        UpdateAnnotation();
    }                                                                     

    private void jToggleButtonTharfZamanActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        UpdateAnnotation();
    }                                                       

    private void jTextAreaCorrectedTextAndPOSCaretUpdate(javax.swing.event.CaretEvent evt) {                                                         
        CaretUpdate(evt);
    }                                                        

    private void jToggleButtonKaanaAndSistersActionPerformed(java.awt.event.ActionEvent evt) {                                                             
        UpdateAnnotation();
    }                                                            

    private void jToggleButtonTharfMakanActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        UpdateAnnotation();
    }                                                       

    private void jToggleButtonPOSPrepositionALAActionPerformed(java.awt.event.ActionEvent evt) {                                                               
        UpdateAnnotation();
    }                                                              

    private void jToggleButtonPOSPrepositinoElAActionPerformed(java.awt.event.ActionEvent evt) {                                                               
        UpdateAnnotation();
    }                                                              

    private void jTogglePOSParticleMATAActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButtonPOSParticleANActionPerformed(java.awt.event.ActionEvent evt) {                                                           
        UpdateAnnotation();
    }                                                          

    private void jToggleButtonPOSParticleLNActionPerformed(java.awt.event.ActionEvent evt) {                                                           
        UpdateAnnotation();
    }                                                          

    private void jToggleButtonPOSParticleKAIActionPerformed(java.awt.event.ActionEvent evt) {                                                            
        UpdateAnnotation();
    }                                                           

    private void jToggleButtonParticleLAAActionPerformed(java.awt.event.ActionEvent evt) {                                                         
        UpdateAnnotation();
    }                                                        

    private void jToggleButtonParticleLAMActionPerformed(java.awt.event.ActionEvent evt) {                                                         
        UpdateAnnotation();
    }                                                        

    private void jToggleButtonPrefixParticleWAActionPerformed(java.awt.event.ActionEvent evt) {                                                              
        UpdateAnnotation();
    }                                                             

    private void jToggleButtonPrefixParticleFAActionPerformed(java.awt.event.ActionEvent evt) {                                                              
        UpdateAnnotation();
    }                                                             

    private void jToggleButtonPrefixPrepositionBIActionPerformed(java.awt.event.ActionEvent evt) {                                                                 
        UpdateAnnotation();
    }                                                                

    private void jToggleButtonPrefixPrepositionLIActionPerformed(java.awt.event.ActionEvent evt) {                                                                 
        UpdateAnnotation();
    }                                                                

    private void jToggleButtonPrefixPrepositionKAActionPerformed(java.awt.event.ActionEvent evt) {                                                                 
        UpdateAnnotation();
    }                                                                

    private void jToggleButtonPrefixParticleSAActionPerformed(java.awt.event.ActionEvent evt) {                                                              
        UpdateAnnotation();
    }                                                             

    private void jToggleButtonPrefixParticleALActionPerformed(java.awt.event.ActionEvent evt) {                                                              
        UpdateAnnotation();
    }                                                             

    private void jToggleButtonSuffixSSMActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButtonSuffixSDMActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButtonSuffixSGMActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButtonSuffixSSFActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButtonSuffixSDFActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButtonSuffixSGFActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButtonSuffixOSMActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButtonSuffixODMActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButtonSuffixOGMActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButtonSuffixOSFActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButtonSuffixODFActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButtonSuffixOGFActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButtonSuffixPSMActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButtonSuffixPDMActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButtonSuffixPGMActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButtonSuffixPSFActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButtonSuffixPDFActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButtonSuffixPGFActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        UpdateAnnotation();
    }                                                      

    private void jToggleButton1stVoiceActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        UpdateAnnotation();
    }                                                     

    private void jToggleButton2ndVoiceActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        UpdateAnnotation();
    }                                                     

    private void jToggleButton3rdVoiceActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        UpdateAnnotation();
    }                                                     

    private void DisplaySentenceRecord(Sentence paraSentence) throws SQLException {

        jTextSentenceId.setText(Integer.toString(paraSentence.getId()));
        jTextStoryId.setText(Integer.toString(paraSentence.getStoryId()));
        jTextLineNumber.setText(Integer.toString(paraSentence.getLineNumber()));
        jTextTextOnly.setText(paraSentence.getTextOnly());
        jTextTextAndPOS.setText(paraSentence.getTextAndPos());
        jTextAreaCorrectedTextAndPOS.setText(paraSentence.getCorrectedTextAndPos());
        jTextAreaExpandedTextandPOS.setText(paraSentence.getExpandedTextAndPos());
        jTextAreaSemanticTextandPOS.setText(paraSentence.getSemanticTextAndPos());
        jTextParseTree.setText(paraSentence.getParseTree());
        jTextCorrectedParseTree.setText(paraSentence.getCorrectedParseTree());
    }

    private void DisplaySentenceConceptRecord(SentenceConcept paraSentenceConcept) {

        jTextSCId.setText(Integer.toString(paraSentenceConcept.getId()));
        jTextSCSentenceId.setText(Integer.toString(paraSentenceConcept.getSentenceId()));
        jTextConceptSequenceNumber.setText(Integer.toString(paraSentenceConcept.getConceptSequenceNumber()));
        SelectConceptIdRow(paraSentenceConcept.getConceptId());
        jTextPatternId.setText(Integer.toString(paraSentenceConcept.getConceptPatternId()));
        jTextArgument1.setText(paraSentenceConcept.getArgument1());
        jTextArgument2.setText(paraSentenceConcept.getArgument2());
        jLabelArgument1.setText(paraSentenceConcept.getArgument1ConceptId());
        jLabelArgument2.setText(paraSentenceConcept.getArgument2ConceptId());
        jCheckBoxImplicit.setSelected(paraSentenceConcept.getImplicit());
        CBConceptCompositeLevelId.setSelectedItem(paraSentenceConcept.getConceptCompositeLevel());
        jCheckBoxNegation.setSelected(paraSentenceConcept.getNegation());
        jTANote.setText(paraSentenceConcept.getNote());

    }

    private Sentence GetDisplayedSentenceRecord() throws SQLException {

        Sentence sentenceRecord = new Sentence();

        sentenceRecord.setId(Integer.parseInt(jTextSentenceId.getText()));
        sentenceRecord.setStoryId(Integer.parseInt(jTextStoryId.getText()));
        sentenceRecord.setLineNumber(Integer.parseInt(jTextLineNumber.getText()));
        sentenceRecord.setTextOnly(jTextTextOnly.getText());
        sentenceRecord.setTextAndPos(jTextTextAndPOS.getText());
        sentenceRecord.setCorrectedTextAndPos(jTextAreaCorrectedTextAndPOS.getText());
        sentenceRecord.setExpandedTextAndPos(jTextAreaExpandedTextandPOS.getText());
        sentenceRecord.setSemanticTextAndPos(jTextAreaSemanticTextandPOS.getText());
        sentenceRecord.setParseTree(jTextParseTree.getText());
        sentenceRecord.setCorrectedParseTree(jTextCorrectedParseTree.getText());

        return sentenceRecord;
    }

    private SentenceConcept GetDisplayedSCRecord() {
        SentenceConcept sentenceConceptRecord = new SentenceConcept();

        sentenceConceptRecord.setId(Integer.parseInt(jTextSCId.getText()));
        sentenceConceptRecord.setSentenceId(Integer.parseInt(jTextSCSentenceId.getText()));
        sentenceConceptRecord.setConceptSequenceNumber(Integer.parseInt(jTextConceptSequenceNumber.getText()));
        sentenceConceptRecord.setConceptId(dataModelConceptsList.getValueAt(jTableConceptsList.getSelectedRow(), 0).toString());
        sentenceConceptRecord.setConceptPatternId(Integer.parseInt(jTextPatternId.getText()));
        sentenceConceptRecord.setArgument1(jTextArgument1.getText());
        sentenceConceptRecord.setArgument1ConceptId(jLabelArgument1.getText());
        sentenceConceptRecord.setArgument2(jTextArgument2.getText());
        sentenceConceptRecord.setArgument2ConceptId(jLabelArgument2.getText());
        sentenceConceptRecord.setImplicit(jCheckBoxImplicit.isSelected());
        sentenceConceptRecord.setConceptCompositeLevel(CBConceptCompositeLevelId.getSelectedItem().toString());
        sentenceConceptRecord.setNegation(jCheckBoxNegation.isSelected());
        sentenceConceptRecord.setNote(jTANote.getText());

        return sentenceConceptRecord;
    }

    private void RefreshSentenceConceptResultSet() throws SQLException {
        //Everytime a new Sentence is displayed, we need to refresh the SentenceConcepts
        //Save the record if there is valid data
        if (SentenceConceptDataIsValid()) {
            dacSentenceConcept.SaveRecord(GetDisplayedSCRecord());
        }

        dacSentenceConcept.InitializeRowSet(Integer.parseInt(jTextSentenceId.getText()));
        DisplaySentenceConceptRecord(dacSentenceConcept.GetRecord());
    }

    private void PopulateConceptTable(String paraOntologyFilePath) {

        try {
            ReCreateTableDTMModel();

            OntologyInterface ontologyInterface;
            ontologyInterface = new OntologyInterface(paraOntologyFilePath);
            List<ConceptMatchStructure> resultList = ontologyInterface.ParseOntology();

            Collections.sort(resultList, (ConceptMatchStructure s1, ConceptMatchStructure s2) -> {
                return s1.ConceptId.compareToIgnoreCase(s2.ConceptId);
            });

            for (int ii = 0; ii < resultList.size(); ii++) {
                Object[] data = {resultList.get(ii).ConceptId,
                    resultList.get(ii).Category,
                    resultList.get(ii).ArgumentOneClass,
                    resultList.get(ii).ArgumentTwoClass,
                    resultList.get(ii).ParentClass};

                dataModelConceptsList.addRow(data);
            }

            jTableConceptsList.setModel(dataModelConceptsList);

        } catch (OWLOntologyCreationException ex) {
            Logger.getLogger(AnnotationFrm.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (Exception ex) {
            Logger.getLogger(AnnotationFrm.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void ReCreateTableDTMModel() {
        if (dataModelConceptsList != null) {
            dataModelConceptsList = null;
        }

        dataModelConceptsList = new DefaultTableModel();
        dataModelConceptsList.addColumn("Concept");
        dataModelConceptsList.addColumn("Category");
        dataModelConceptsList.addColumn("Arg 1 Class");
        dataModelConceptsList.addColumn("Arg 2 Class");
        dataModelConceptsList.addColumn("Parent Class");
    }

    private void ChangeConceptArgumentsSettings() {
        switch (dataModelConceptsList.getValueAt(jTableConceptsList.getSelectedRow(), 1).toString()) {
            case ConceptCategoryDefinition.ClassLabel:
                jLabelArgument1.setText(dataModelConceptsList.getValueAt(jTableConceptsList.getSelectedRow(), 0).toString());
                jLabelArgument2.setText("");
                jTextArgument2.setEnabled(false);
                break;
            case ConceptCategoryDefinition.ObjectCategoryLabel:
                jLabelArgument1.setText("Argument 1");
                jLabelArgument2.setText("Argument 2");

                jTextArgument2.setEnabled(true);

                if (dataModelConceptsList.getValueAt(jTableConceptsList.getSelectedRow(), 2) != null) {
                    jLabelArgument1.setText(dataModelConceptsList.getValueAt(jTableConceptsList.getSelectedRow(), 2).toString());
                }

                if (dataModelConceptsList.getValueAt(jTableConceptsList.getSelectedRow(), 3) != null) {
                    jLabelArgument2.setText(dataModelConceptsList.getValueAt(jTableConceptsList.getSelectedRow(), 3).toString());
                }
                break;
        }
    }

    private boolean SentenceConceptDataIsValid() {
        return jTableConceptsList.getSelectedRow() != -1;
    }

    private void SelectConceptIdRow(String paraString) {
        jTableConceptsList.clearSelection();
        jLabelSelectedConcept.setText(paraString);

        for (int i = 0; i < dataModelConceptsList.getRowCount(); i++) {
            // 0 is for the column Part number
            if (dataModelConceptsList.getValueAt(i, 0).equals(paraString)) {
                jTableConceptsList.setRowSelectionInterval(i, i);
                jLabelSelectedConcept.setText(paraString);

                jTableConceptsList.scrollRectToVisible(new Rectangle(jTableConceptsList.getCellRect(i, 0, true)));
                ChangeConceptArgumentsSettings();
                break;
            }
        }
    }

    public void CaretUpdate(CaretEvent evt) {
        int cursorPosition = evt.getDot();
        CurrentjTextArea = (javax.swing.JTextArea) evt.getSource();
        UserSelectedPOSSegment = "";

        try {
            if (cursorPosition == jTextAreaCorrectedTextAndPOS.getText().length()) {
                return;
            }

            char[] charArray = jTextAreaCorrectedTextAndPOS.getText().toCharArray();

            for (int i = cursorPosition; i >= 0; i--) {
                if (((int) (charArray[cursorPosition - (cursorPosition - i)]) == 32)
                        || (i == 0)) {
                    if (i == 0) {
                        //Just return the current i index
                        SelectionStartPosition = i;
                        break;
                    } else {
                        //if not the first token, then add 1 to compensate for the space after the token
                        //because the begining of this token shall be right after the space character
                        SelectionStartPosition = i + 1;
                        break;
                    }
                }
            }

            for (int i = cursorPosition; i <= charArray.length - 1; i++) {
                if (((int) (charArray[i]) == 32) || (i == charArray.length - 1)) {
                    if (i == charArray.length - 1) {
                        SelectionEndPosition = i;
                        break;
                    } else {
                        SelectionEndPosition = i - 1;
                        break;
                    }
                }
            }

            for (int i = SelectionStartPosition; i <= SelectionEndPosition; i++) {
                UserSelectedPOSSegment = UserSelectedPOSSegment + charArray[i];
            }

            jLabelStart.setText(String.valueOf(SelectionStartPosition));
            jLabelEnd.setText(String.valueOf(SelectionEndPosition));

            ResetAllToggleButtons(jTabbedPane_POS);
            BuildExistingTaggingFromSelectedString(UserSelectedPOSSegment.trim());
        } catch (Exception ex) {
            Logger.getLogger(AnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void ResetAllToggleButtons(Container parent) {
        for (java.awt.Component c : parent.getComponents()) {
            if (c instanceof javax.swing.JPanel) {
                ResetAllToggleButtons((Container) c);
            }
            if (c instanceof javax.swing.JToggleButton) {
                ((javax.swing.JToggleButton) c).setSelected(false);
            }
        }
    }

    private void UpdateAnnotation() {
        ArrayList<String> newStrArray = new ArrayList<>();

        //Add the previous string - preString            
        //1 to bypass the previous space
        if (SelectionStartPosition > 0) {
            newStrArray.add(CurrentjTextArea.getText().substring(0, SelectionStartPosition - 1));
        }

        String arabicToken = TextSkimmer.SkimPOSTagsKeepText(UserSelectedPOSSegment);
        String newTagging = BuildNewTokenTaggingFromSelectedToggleButtons();

        if (newTagging.length() > 0) {
            newStrArray.add(arabicToken + "/" + newTagging);
        } else {
            newStrArray.add(arabicToken);
        }

        //Add the postString
        //2 so that we bypass the last character of the selected string and bypass the space
        if (SelectionEndPosition < CurrentjTextArea.getText().length() - 1) {
            newStrArray.add(CurrentjTextArea.getText().substring(SelectionEndPosition + 1, CurrentjTextArea.getText().length()));
        }

        String fullStr = "";
        for (String value : newStrArray) {
            fullStr = fullStr + value;
            fullStr = fullStr + " ";
        }
        fullStr = fullStr.trim();

        //Now calculate the new SelectionEndPosition
        if (newTagging.length() > 0) {//add 1 for the missing slash, then remove it, just for clarift
            SelectionEndPosition = SelectionStartPosition + arabicToken.length() + 1 + newTagging.length() - 1;
        } else {
            SelectionEndPosition = SelectionStartPosition + arabicToken.length() - 1;
        }

        CurrentjTextArea.setText(fullStr);

        jLabelEnd.setText(String.valueOf(SelectionEndPosition));
        UserSelectedPOSSegment = CurrentjTextArea.getText().substring(SelectionStartPosition, SelectionEndPosition + 1);
    }

    private void BuildExistingTaggingFromSelectedString(String paraString) {
        if (paraString.contains(POSTagDefinition.ParticleWA)) {
            jToggleButtonPrefixParticleWA.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.PrepositionFA)) {
            jToggleButtonPrefixParticleFA.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.PrepositionBI)) {
            jToggleButtonPrefixPrepositionBI.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.PrepositionLI)) {
            jToggleButtonPrefixPrepositionLI.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.PrepositionKA)) {
            jToggleButtonPrefixPrepositionKA.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.ParticleSA)) {
            jToggleButtonPrefixParticleSA.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.ParticleAL)) {
            jToggleButtonPrefixParticleAL.setSelected(true);
        }

        //B a s e    T a g     *************************************************
        //_____________________________________________________________________
        if ((paraString.contains(POSTagDefinition.Noun + " ")) || (paraString.contains(POSTagDefinition.Noun + "+"))) {
            jToggleButtonPOSNoun.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Adjective)) {
            jToggleButtonPOSAdjective.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Adverb)) {
            jToggleButtonPOSAdverb.setSelected(true);
        }

        if ((paraString.contains(POSTagDefinition.VerbGeneral + " ")) || (paraString.contains(POSTagDefinition.VerbGeneral + "+"))) {
            jToggleButtonPOSVerbGeneral.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.VerbPast)) {
            jToggleButtonPOSVerbPast.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.VerbPresent)) {
            jToggleButtonPOSVerbPresent.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Gerund)) {
            jToggleButtonPOSGerund.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Pronoun)) {
            jToggleButtonPOSPronoun.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.ProperName)) {
            jToggleButtonPOSProperName.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.PrePosition)) {
            jToggleButtonPOSPreposition.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Particle)) {
            jToggleButtonPOSParticle.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.CordinatingConjuction)) {
            jToggleButtonPOSCordinatingConjuction.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.KaanaAndSisters)) {
            jToggleButtonKaanaAndSisters.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.EnnaAndSisters)) {
            jToggleButtonPOSEnnaAndSisters.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.TharfMakan)) {
            jToggleButtonTharfMakan.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.TharfZaman)) {
            jToggleButtonTharfZaman.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.PrepositionFEE)) {
            jToggleButtonPOSPrepositionFEE.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.PrepositionALA)) {
            jToggleButtonPOSPrepositionALA.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.PrepositionELA)) {
            jToggleButtonPOSPrepositinoElA.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.PrepositionHATTA)) {
            jTogglePOSPrepositionHATTA.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.PrepositionMATA)) {
            jTogglePOSParticleMATA.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.ParticleAN)) {
            jToggleButtonPOSParticleAN.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.ParticleLN)) {
            jToggleButtonPOSParticleLN.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.ParticleLN)) {
            jToggleButtonPOSParticleLN.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.ParticleKAI)) {
            jToggleButtonPOSParticleKAI.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.ParticleYAA)) {
            jToggleButtonPOSParticleYAA.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.ParticleLAA)) {
            jToggleButtonParticleLAA.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.ParticleLM)) {
            jToggleButtonParticleLAM.setSelected(true);
        }

        //V e r b     V o i c e    ********************************************
        //______________________________________________________________________
        if (paraString.contains(POSTagDefinition.VoiceFirst)) {
            jToggleButton1stVoice.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.VoiceSecond)) {
            jToggleButton2ndVoice.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.VoiceThird)) {
            jToggleButton3rdVoice.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Suffix_SSM)) {
            jToggleButtonSuffixSSM.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Suffix_SDM)) {
            jToggleButtonSuffixSDM.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Suffix_SGM)) {
            jToggleButtonSuffixSGM.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Suffix_SSF)) {
            jToggleButtonSuffixSSF.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Suffix_SDF)) {
            jToggleButtonSuffixSDF.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Suffix_SGF)) {
            jToggleButtonSuffixSGF.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Suffix_OSM)) {
            jToggleButtonSuffixOSM.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Suffix_ODM)) {
            jToggleButtonSuffixODM.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Suffix_OGM)) {
            jToggleButtonSuffixOGM.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Suffix_OSF)) {
            jToggleButtonSuffixOSF.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Suffix_ODF)) {
            jToggleButtonSuffixODF.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Suffix_OGF)) {
            jToggleButtonSuffixOGF.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Suffix_PSM)) {
            jToggleButtonSuffixPSM.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Suffix_PDM)) {
            jToggleButtonSuffixPDM.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Suffix_PGM)) {
            jToggleButtonSuffixPGM.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Suffix_PSF)) {
            jToggleButtonSuffixPSF.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Suffix_PDF)) {
            jToggleButtonSuffixPDF.setSelected(true);
        }

        if (paraString.contains(POSTagDefinition.Suffix_PGF)) {
            jToggleButtonSuffixPGF.setSelected(true);
        }
    }

    private String BuildNewTokenTaggingFromSelectedToggleButtons() {
        String selectedTagsStr = "";

        //P r e-F i x e s e s    ***********************************************
        //_____________________________________________________________________
        if (jToggleButtonPrefixParticleWA.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.ParticleWA;
        }

        if (jToggleButtonPrefixParticleFA.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.PrepositionFA;
        }

        if (jToggleButtonPrefixPrepositionBI.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.PrepositionBI;
        }

        if (jToggleButtonPrefixPrepositionLI.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.PrepositionLI;
        }

        if (jToggleButtonPrefixPrepositionKA.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.PrepositionKA;
        }

        if (jToggleButtonPrefixParticleSA.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.ParticleSA;
        }

        if (jToggleButtonPrefixParticleAL.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.ParticleAL;
        }

        //B a s e    T a g     *************************************************
        //_____________________________________________________________________
        if (jToggleButtonPOSNoun.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Noun;
        }

        if (jToggleButtonPOSAdjective.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Adjective;
        }

        if (jToggleButtonPOSAdverb.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Adverb;
        }

        if (jToggleButtonPOSVerbGeneral.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.VerbGeneral;
        }

        if (jToggleButtonPOSVerbPast.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.VerbPast;
        }

        if (jToggleButtonPOSVerbPresent.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.VerbPresent;
        }

        if (jToggleButtonPOSGerund.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Gerund;
        }

        if (jToggleButtonPOSPronoun.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Pronoun;
        }

        if (jToggleButtonPOSProperName.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.ProperName;
        }

        if (jToggleButtonPOSPreposition.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.PrePosition;
        }

        if (jToggleButtonPOSParticle.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Particle;
        }

        if (jToggleButtonPOSCordinatingConjuction.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.CordinatingConjuction;
        }

        if (jToggleButtonKaanaAndSisters.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.KaanaAndSisters;
        }

        if (jToggleButtonPOSEnnaAndSisters.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.EnnaAndSisters;
        }

        if (jToggleButtonTharfMakan.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.TharfMakan;
        }

        if (jToggleButtonTharfZaman.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.TharfZaman;
        }

        if (jToggleButtonPOSPrepositionFEE.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.PrepositionFEE;
        }

        if (jToggleButtonPOSPrepositionALA.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.PrepositionALA;
        }

        if (jToggleButtonPOSPrepositinoElA.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.PrepositionELA;
        }

        if (jTogglePOSPrepositionHATTA.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.PrepositionHATTA;
        }

        if (jTogglePOSParticleMATA.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.PrepositionMATA;
        }

        if (jToggleButtonPOSParticleAN.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.ParticleAN;
        }

        if (jToggleButtonPOSParticleLN.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.ParticleLN;
        }

        if (jToggleButtonPOSParticleKAI.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.ParticleKAI;
        }

        if (jToggleButtonPOSParticleYAA.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.ParticleYAA;
        }

        if (jToggleButtonParticleLAA.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.ParticleLAA;
        }

        if (jToggleButtonParticleLAM.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.ParticleLM;
        }

        //V e r b     V o i c e    ********************************************
        //______________________________________________________________________
        if (jToggleButton1stVoice.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.VoiceFirst;
        }

        if (jToggleButton2ndVoice.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.VoiceSecond;
        }

        if (jToggleButton3rdVoice.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.VoiceThird;
        }

        if (jToggleButtonSuffixSSM.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Suffix_SSM;
        }

        if (jToggleButtonSuffixSDM.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Suffix_SDM;
        }

        if (jToggleButtonSuffixSGM.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Suffix_SGM;
        }

        if (jToggleButtonSuffixSSF.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Suffix_SSF;
        }

        if (jToggleButtonSuffixSDF.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Suffix_SDF;
        }

        if (jToggleButtonSuffixSGF.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Suffix_SGF;
        }

        if (jToggleButtonSuffixOSM.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Suffix_OSM;
        }

        if (jToggleButtonSuffixODM.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Suffix_ODM;
        }

        if (jToggleButtonSuffixOGM.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Suffix_OGM;
        }

        if (jToggleButtonSuffixOSF.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Suffix_OSF;
        }

        if (jToggleButtonSuffixODF.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Suffix_ODF;
        }

        if (jToggleButtonSuffixOGF.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Suffix_OGF;
        }

        if (jToggleButtonSuffixPSM.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Suffix_PSM;
        }

        if (jToggleButtonSuffixPDM.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Suffix_PDM;
        }

        if (jToggleButtonSuffixPGM.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Suffix_PGM;
        }

        if (jToggleButtonSuffixPSF.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Suffix_PSF;
        }

        if (jToggleButtonSuffixPDF.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Suffix_PDF;
        }

        if (jToggleButtonSuffixPGF.isSelected()) {
            if (selectedTagsStr.length() > 0) {
                selectedTagsStr = selectedTagsStr + "+";
            }

            selectedTagsStr = selectedTagsStr + POSTagDefinition.Suffix_PGF;
        }

        return selectedTagsStr;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnnotationFrm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new AnnotationFrm().setVisible(true);

                } catch (OWLOntologyStorageException | OWLOntologyCreationException | ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(AnnotationFrm.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JComboBox<String> CBConceptCompositeLevelId;
    private javax.swing.JButton CMDFirstSC;
    private javax.swing.JButton CMDFirstSentence;
    private javax.swing.JButton CMDLastSC;
    private javax.swing.JButton CMDLastSentence;
    private javax.swing.JButton CMDNextSC;
    private javax.swing.JButton CMDNextSentence;
    private javax.swing.JButton CMDPreviousSC;
    private javax.swing.JButton CMDPreviousSentence;
    private javax.swing.JButton CmdClose;
    private javax.swing.JButton CmdRefreshDB;
    private javax.swing.JButton CmdSelectOntology;
    private javax.swing.JCheckBox jCheckBoxImplicit;
    private javax.swing.JCheckBox jCheckBoxNegation;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelArgument1;
    private javax.swing.JLabel jLabelArgument2;
    private javax.swing.JLabel jLabelEnd;
    private javax.swing.JLabel jLabelOntologyStatus;
    private javax.swing.JLabel jLabelSelectedConcept;
    private javax.swing.JLabel jLabelStart;
    private javax.swing.JPanel jPanelOtherInfo;
    private javax.swing.JPanel jPanelPOSTags;
    private javax.swing.JPanel jPanelParseTrees;
    private javax.swing.JPanel jPanelPennPOS;
    private javax.swing.JPanel jPanelPrefix;
    private javax.swing.JPanel jPanelSuffix;
    private javax.swing.JPanel jPanelVoice;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextArea jTANote;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTabbedPane jTabbedPane_POS;
    private javax.swing.JTable jTableConceptsList;
    private javax.swing.JTextArea jTextAreaCorrectedTextAndPOS;
    private javax.swing.JTextArea jTextAreaExpandedTextandPOS;
    private javax.swing.JTextArea jTextAreaSemanticTextandPOS;
    private javax.swing.JTextField jTextArgument1;
    private javax.swing.JTextField jTextArgument2;
    private javax.swing.JTextField jTextConceptSequenceNumber;
    private javax.swing.JTextArea jTextCorrectedParseTree;
    private javax.swing.JTextField jTextLineNumber;
    private javax.swing.JTextArea jTextParseTree;
    private javax.swing.JTextField jTextPatternId;
    private javax.swing.JTextField jTextSCId;
    private javax.swing.JTextField jTextSCSentenceId;
    private javax.swing.JTextField jTextSentenceId;
    private javax.swing.JTextField jTextStoryId;
    private javax.swing.JTextField jTextTextAndPOS;
    private javax.swing.JTextField jTextTextOnly;
    private javax.swing.JToggleButton jToggleButton1stVoice;
    private javax.swing.JToggleButton jToggleButton2ndVoice;
    private javax.swing.JToggleButton jToggleButton3rdVoice;
    private javax.swing.JToggleButton jToggleButtonKaanaAndSisters;
    private javax.swing.JToggleButton jToggleButtonPOSAdjective;
    private javax.swing.JToggleButton jToggleButtonPOSAdverb;
    private javax.swing.JToggleButton jToggleButtonPOSCordinatingConjuction;
    private javax.swing.JToggleButton jToggleButtonPOSEnnaAndSisters;
    private javax.swing.JToggleButton jToggleButtonPOSGerund;
    private javax.swing.JToggleButton jToggleButtonPOSNoun;
    private javax.swing.JToggleButton jToggleButtonPOSParticle;
    private javax.swing.JToggleButton jToggleButtonPOSParticleAN;
    private javax.swing.JToggleButton jToggleButtonPOSParticleKAI;
    private javax.swing.JToggleButton jToggleButtonPOSParticleLN;
    private javax.swing.JToggleButton jToggleButtonPOSParticleYAA;
    private javax.swing.JToggleButton jToggleButtonPOSPrepositinoElA;
    private javax.swing.JToggleButton jToggleButtonPOSPrepositinoMEN;
    private javax.swing.JToggleButton jToggleButtonPOSPreposition;
    private javax.swing.JToggleButton jToggleButtonPOSPrepositionALA;
    private javax.swing.JToggleButton jToggleButtonPOSPrepositionFEE;
    private javax.swing.JToggleButton jToggleButtonPOSPronoun;
    private javax.swing.JToggleButton jToggleButtonPOSProperName;
    private javax.swing.JToggleButton jToggleButtonPOSVerbGeneral;
    private javax.swing.JToggleButton jToggleButtonPOSVerbPast;
    private javax.swing.JToggleButton jToggleButtonPOSVerbPresent;
    private javax.swing.JToggleButton jToggleButtonParticleLAA;
    private javax.swing.JToggleButton jToggleButtonParticleLAM;
    private javax.swing.JToggleButton jToggleButtonPrefixParticleAL;
    private javax.swing.JToggleButton jToggleButtonPrefixParticleFA;
    private javax.swing.JToggleButton jToggleButtonPrefixParticleSA;
    private javax.swing.JToggleButton jToggleButtonPrefixParticleWA;
    private javax.swing.JToggleButton jToggleButtonPrefixPrepositionBI;
    private javax.swing.JToggleButton jToggleButtonPrefixPrepositionKA;
    private javax.swing.JToggleButton jToggleButtonPrefixPrepositionLI;
    private javax.swing.JToggleButton jToggleButtonSuffixODF;
    private javax.swing.JToggleButton jToggleButtonSuffixODM;
    private javax.swing.JToggleButton jToggleButtonSuffixOGF;
    private javax.swing.JToggleButton jToggleButtonSuffixOGM;
    private javax.swing.JToggleButton jToggleButtonSuffixOSF;
    private javax.swing.JToggleButton jToggleButtonSuffixOSM;
    private javax.swing.JToggleButton jToggleButtonSuffixPDF;
    private javax.swing.JToggleButton jToggleButtonSuffixPDM;
    private javax.swing.JToggleButton jToggleButtonSuffixPGF;
    private javax.swing.JToggleButton jToggleButtonSuffixPGM;
    private javax.swing.JToggleButton jToggleButtonSuffixPSF;
    private javax.swing.JToggleButton jToggleButtonSuffixPSM;
    private javax.swing.JToggleButton jToggleButtonSuffixSDF;
    private javax.swing.JToggleButton jToggleButtonSuffixSDM;
    private javax.swing.JToggleButton jToggleButtonSuffixSGF;
    private javax.swing.JToggleButton jToggleButtonSuffixSGM;
    private javax.swing.JToggleButton jToggleButtonSuffixSSF;
    private javax.swing.JToggleButton jToggleButtonSuffixSSM;
    private javax.swing.JToggleButton jToggleButtonTharfMakan;
    private javax.swing.JToggleButton jToggleButtonTharfZaman;
    private javax.swing.JToggleButton jTogglePOSParticleMATA;
    private javax.swing.JToggleButton jTogglePOSPrepositionHATTA;
    // End of variables declaration                   
}

