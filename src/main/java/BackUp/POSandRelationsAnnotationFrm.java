/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BackUp;

import DB.DAC.*;
import DB.*;
import Utility.ConceptCategoryDefinition;
import Utility.CapturedConceptStructure;
import Utility.EnumRecordMovementDirection;
import Utility.OntologyInterface;
import java.awt.Color;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JToggleButton;
import javax.swing.event.CaretEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.semanticweb.owlapi.model.OWLOntologyCreationException;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 *
 * @author Mohammad Fasha
 */
public class POSandRelationsAnnotationFrm extends javax.swing.JFrame {

    /**
     * Creates new form POSandRelationsAnnotationFrm
     */
    OntologyInterface o;
    DACSentence dacSentence;
    DACSentenceConcept dacSentenceConcept;
    DefaultTableModel dataModelConceptsListConceptExtraction;
    DefaultTableModel dataModelConceptsListOWLAnnotation;
    DefaultTableModel dtmSentenceConcepts;

    ArrayList<javax.swing.JPanel> PanelsArray;
    ArrayList<javax.swing.JToggleButton> ToggleButtonsArray;

    Clipboard clipBoard;

    javax.swing.JTextArea ActiveTextArea;

    public POSandRelationsAnnotationFrm() throws OWLOntologyStorageException, OWLOntologyCreationException, ClassNotFoundException, SQLException {
        try {
            initComponents();

            //Fill combo boxes
            CBConceptCompositeLevelId.addItem("Atomic");
            CBConceptCompositeLevelId.addItem("Composite");
            clipBoard = Toolkit.getDefaultToolkit().getSystemClipboard();

            //dynamically create toggle buttons from DB
            CreateTagToggleButtons();

            //reset jTreePOSTags
            jTreePOSTags.removeAll();
            jTreePOSTags.setModel(null);
        } catch (Exception ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CMDFirstSentence = new javax.swing.JButton();
        CMDLastSentence = new javax.swing.JButton();
        CMDPreviousSentence = new javax.swing.JButton();
        CMDNextSentence = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextSCId = new javax.swing.JTextField();
        jTextSCSentenceId = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextConceptSequenceNumber = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jTextPatternId = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabelArgument1 = new javax.swing.JLabel();
        jTextArgument1 = new javax.swing.JTextField();
        jTextArgument2 = new javax.swing.JTextField();
        jLabelArgument2 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        CBConceptCompositeLevelId = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTANote = new javax.swing.JTextArea();
        jCheckBoxImplicit = new javax.swing.JCheckBox();
        CMDFirstSC = new javax.swing.JButton();
        CMDLastSC = new javax.swing.JButton();
        CMDPreviousSC = new javax.swing.JButton();
        CMDNextSC = new javax.swing.JButton();
        jLabelOntologyStatus = new javax.swing.JLabel();
        CmdClose = new javax.swing.JButton();
        CmdLoadOntology = new javax.swing.JButton();
        CmdRefreshDB = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableConceptExtraction = new javax.swing.JTable();
        jLabelSelectedConcept = new javax.swing.JLabel();
        jCheckBoxNegation = new javax.swing.JCheckBox();
        jTabbedPaneSentences = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTreePOSTags = new javax.swing.JTree();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextAreaSentenceExpandedPOS = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextAreaSentenceOWLPOS = new javax.swing.JTextArea();
        CmdAddTreeChild = new javax.swing.JButton();
        CmdDeleteTreeChild = new javax.swing.JButton();
        CmdSave = new javax.swing.JButton();
        LblLineNumber = new javax.swing.JLabel();
        LblId = new javax.swing.JLabel();
        LblStoryId = new javax.swing.JLabel();
        CmdRevert = new javax.swing.JButton();
        jPanelParseTrees = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextCorrectedParseTree = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextParseTree = new javax.swing.JTextArea();
        jFileChooser = new javax.swing.JFileChooser();
        jTabbedPanePOSTags = new javax.swing.JTabbedPane();
        jPanelOWLTags = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTableOWLAnnotation = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("JFrameMain"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        CMDFirstSentence.setText("<<");
        CMDFirstSentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDFirstSentenceActionPerformed(evt);
            }
        });
        getContentPane().add(CMDFirstSentence, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 400, 50, -1));

        CMDLastSentence.setText(">>");
        CMDLastSentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDLastSentenceActionPerformed(evt);
            }
        });
        getContentPane().add(CMDLastSentence, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 400, -1, -1));

        CMDPreviousSentence.setText("<");
        CMDPreviousSentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDPreviousSentenceActionPerformed(evt);
            }
        });
        getContentPane().add(CMDPreviousSentence, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 400, 50, -1));

        CMDNextSentence.setText(">");
        CMDNextSentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDNextSentenceActionPerformed(evt);
            }
        });
        getContentPane().add(CMDNextSentence, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 400, 50, -1));

        jLabel9.setForeground(new java.awt.Color(153, 153, 153));
        jLabel9.setText("Id");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 70, 50, -1));

        jLabel11.setForeground(new java.awt.Color(153, 153, 153));
        jLabel11.setText("Sentence Id");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 100, 100, -1));

        jTextSCId.setEditable(false);
        jTextSCId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(jTextSCId, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 70, 103, -1));

        jTextSCSentenceId.setEditable(false);
        jTextSCSentenceId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(jTextSCSentenceId, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 100, 253, -1));

        jLabel12.setForeground(new java.awt.Color(153, 153, 153));
        jLabel12.setText("Sequence Number");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 130, 130, -1));

        jTextConceptSequenceNumber.setEditable(false);
        jTextConceptSequenceNumber.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(jTextConceptSequenceNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 130, 253, -1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(153, 153, 153));
        jLabel13.setText("Concept Id");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 160, 100, -1));

        jTextPatternId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(jTextPatternId, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 510, 150, -1));

        jLabel22.setText("Pattern Id");
        getContentPane().add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 510, 130, -1));

        jLabelArgument1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelArgument1.setText("Argument 1");
        getContentPane().add(jLabelArgument1, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 480, 130, -1));

        jTextArgument1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextArgument1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextArgument1MouseClicked(evt);
            }
        });
        getContentPane().add(jTextArgument1, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 480, 150, -1));

        jTextArgument2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextArgument2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextArgument2MouseClicked(evt);
            }
        });
        getContentPane().add(jTextArgument2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 480, 150, -1));

        jLabelArgument2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelArgument2.setText("Argument 2");
        getContentPane().add(jLabelArgument2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 480, -1, -1));

        jLabel18.setText("Implicit");
        getContentPane().add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 510, -1, -1));

        CBConceptCompositeLevelId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(CBConceptCompositeLevelId, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 540, 150, -1));

        jLabel19.setText("Composite Level");
        getContentPane().add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 540, 130, -1));

        jLabel20.setText("Negation");
        getContentPane().add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 540, -1, -1));

        jLabel16.setText("Note");
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 570, 60, -1));

        jTANote.setColumns(20);
        jTANote.setFont(new java.awt.Font("Courier New", 1, 12)); // NOI18N
        jTANote.setRows(5);
        jScrollPane2.setViewportView(jTANote);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 570, 340, 70));
        getContentPane().add(jCheckBoxImplicit, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 510, -1, -1));

        CMDFirstSC.setText("<<");
        CMDFirstSC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDFirstSCActionPerformed(evt);
            }
        });
        getContentPane().add(CMDFirstSC, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 640, 50, -1));

        CMDLastSC.setText(">>");
        CMDLastSC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDLastSCActionPerformed(evt);
            }
        });
        getContentPane().add(CMDLastSC, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 640, -1, -1));

        CMDPreviousSC.setText("<");
        CMDPreviousSC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDPreviousSCActionPerformed(evt);
            }
        });
        getContentPane().add(CMDPreviousSC, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 640, 50, -1));

        CMDNextSC.setText(">");
        CMDNextSC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDNextSCActionPerformed(evt);
            }
        });
        getContentPane().add(CMDNextSC, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 640, 50, -1));

        jLabelOntologyStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelOntologyStatus.setForeground(new java.awt.Color(255, 51, 51));
        jLabelOntologyStatus.setText("No OWL Ontology Selected...");
        getContentPane().add(jLabelOntologyStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 20, 600, 20));

        CmdClose.setText("Close Form");
        CmdClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdCloseActionPerformed(evt);
            }
        });
        getContentPane().add(CmdClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, 140, 30));

        CmdLoadOntology.setText("Load Ontology");
        CmdLoadOntology.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdLoadOntologyActionPerformed(evt);
            }
        });
        getContentPane().add(CmdLoadOntology, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 190, 30));

        CmdRefreshDB.setText(" Load Sentences From DB");
        CmdRefreshDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdRefreshDBActionPerformed(evt);
            }
        });
        getContentPane().add(CmdRefreshDB, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, 170, 30));

        jTableConceptExtraction.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Concept Id", "Category", "Arg 1 Class", "Arg 2 Class", "Parent Class"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableConceptExtraction.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableConceptExtractionMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableConceptExtraction);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 190, 590, 280));

        jLabelSelectedConcept.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelSelectedConcept.setForeground(new java.awt.Color(0, 153, 51));
        jLabelSelectedConcept.setText("...");
        getContentPane().add(jLabelSelectedConcept, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 160, 160, -1));
        getContentPane().add(jCheckBoxNegation, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 540, -1, -1));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTreePOSTags.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreePOSTagsValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(jTreePOSTags);

        jPanel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(-1, 29, 610, 160));

        jTextAreaSentenceExpandedPOS.setColumns(20);
        jTextAreaSentenceExpandedPOS.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextAreaSentenceExpandedPOS.setLineWrap(true);
        jTextAreaSentenceExpandedPOS.setRows(4);
        jTextAreaSentenceExpandedPOS.setWrapStyleWord(true);
        jTextAreaSentenceExpandedPOS.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextAreaSentenceExpandedPOSCaretUpdate(evt);
            }
        });
        jScrollPane7.setViewportView(jTextAreaSentenceExpandedPOS);

        jPanel1.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 220, 610, 60));

        jTextAreaSentenceOWLPOS.setColumns(20);
        jTextAreaSentenceOWLPOS.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextAreaSentenceOWLPOS.setLineWrap(true);
        jTextAreaSentenceOWLPOS.setRows(4);
        jTextAreaSentenceOWLPOS.setWrapStyleWord(true);
        jTextAreaSentenceOWLPOS.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextAreaSentenceOWLPOSCaretUpdate(evt);
            }
        });
        jScrollPane6.setViewportView(jTextAreaSentenceOWLPOS);

        jPanel1.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 290, 610, 40));

        CmdAddTreeChild.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CmdAddTreeChild.setText("+");
        CmdAddTreeChild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdAddTreeChildActionPerformed(evt);
            }
        });
        jPanel1.add(CmdAddTreeChild, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 0, -1, -1));

        CmdDeleteTreeChild.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CmdDeleteTreeChild.setText("-");
        CmdDeleteTreeChild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdDeleteTreeChildActionPerformed(evt);
            }
        });
        jPanel1.add(CmdDeleteTreeChild, new org.netbeans.lib.awtextra.AbsoluteConstraints(572, 0, -1, -1));

        CmdSave.setText("Save");
        CmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdSaveActionPerformed(evt);
            }
        });
        jPanel1.add(CmdSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 200, 70, 20));

        LblLineNumber.setText("Line Number");
        jPanel1.add(LblLineNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 100, -1));

        LblId.setText("Record Id");
        jPanel1.add(LblId, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, 90, -1));

        LblStoryId.setText("Story Id");
        jPanel1.add(LblStoryId, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, 90, -1));

        CmdRevert.setText("Revert");
        CmdRevert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdRevertActionPerformed(evt);
            }
        });
        jPanel1.add(CmdRevert, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 200, 70, 20));

        jTabbedPaneSentences.addTab("Expanded POS", jPanel1);

        jLabel10.setText("Corrected Parse Tree");

        jTextCorrectedParseTree.setColumns(20);
        jTextCorrectedParseTree.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextCorrectedParseTree.setRows(5);
        jTextCorrectedParseTree.setWrapStyleWord(true);
        jScrollPane5.setViewportView(jTextCorrectedParseTree);

        jLabel8.setForeground(new java.awt.Color(153, 153, 153));
        jLabel8.setText("Parse Tree");

        jTextParseTree.setEditable(false);
        jTextParseTree.setColumns(20);
        jTextParseTree.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextParseTree.setRows(5);
        jTextParseTree.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextParseTree);

        javax.swing.GroupLayout jPanelParseTreesLayout = new javax.swing.GroupLayout(jPanelParseTrees);
        jPanelParseTrees.setLayout(jPanelParseTreesLayout);
        jPanelParseTreesLayout.setHorizontalGroup(
            jPanelParseTreesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelParseTreesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelParseTreesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelParseTreesLayout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                        .addGap(382, 382, 382))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelParseTreesLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(jPanelParseTreesLayout.createSequentialGroup()
                        .addComponent(jScrollPane5)
                        .addGap(10, 10, 10))
                    .addGroup(jPanelParseTreesLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanelParseTreesLayout.setVerticalGroup(
            jPanelParseTreesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelParseTreesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPaneSentences.addTab("Parse Trees", jPanelParseTrees);

        getContentPane().add(jTabbedPaneSentences, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 620, 360));
        getContentPane().add(jFileChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 600, 50, 30));

        jTabbedPanePOSTags.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTableOWLAnnotation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Concept Id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableOWLAnnotation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableOWLAnnotationMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(jTableOWLAnnotation);

        javax.swing.GroupLayout jPanelOWLTagsLayout = new javax.swing.GroupLayout(jPanelOWLTags);
        jPanelOWLTags.setLayout(jPanelOWLTagsLayout);
        jPanelOWLTagsLayout.setHorizontalGroup(
            jPanelOWLTagsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 3371, Short.MAX_VALUE)
            .addGroup(jPanelOWLTagsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelOWLTagsLayout.createSequentialGroup()
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 3064, Short.MAX_VALUE)))
        );
        jPanelOWLTagsLayout.setVerticalGroup(
            jPanelOWLTagsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 263, Short.MAX_VALUE)
            .addGroup(jPanelOWLTagsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE))
        );

        jTabbedPanePOSTags.addTab("OWL Tags", jPanelOWLTags);

        getContentPane().add(jTabbedPanePOSTags, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 430, 640, 210));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CreateTagToggleButtons() throws Exception {
        try {
            DACDefTag dacDefTag = new DACDefTag();
            ArrayList<DefTag> defTagArray = dacDefTag.GetAllRowsArrayOrderedByTagOrder();

            PanelsArray = new ArrayList();
            ToggleButtonsArray = new ArrayList();

            for (int i = 0; i < defTagArray.size(); i++) {
                JToggleButton jtb = new JToggleButton(defTagArray.get(i).getTag());

                jtb.setName(defTagArray.get(i).getTag());
                jtb.setText(defTagArray.get(i).getShortName());
                jtb.setToolTipText(defTagArray.get(i).getEnglishDescription()
                        + " " + defTagArray.get(i).getArabicDescription());
                jtb.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        ToggleButtonClicked();
                    }
                });

                PlaceTBInPanel(jtb, defTagArray.get(i).getTagCategory().trim());
                ToggleButtonsArray.add(jtb);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void PlaceTBInPanel(javax.swing.JToggleButton paraTB, String paraPanelName) throws Exception {

        javax.swing.JPanel jPanel = FindPOSTagsPanel(paraPanelName);

        //if no panel was found then create a new one with this new TAG classification
        if (jPanel == null) {

            javax.swing.JScrollPane jScrlPane = new javax.swing.JScrollPane();
            jPanel = new javax.swing.JPanel();

            jScrlPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
            jScrlPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

            jPanel.setMaximumSize(new java.awt.Dimension(500, 500));
            jPanel.setLayout(new java.awt.GridLayout(0, 4));
            jPanel.setName(paraPanelName);
            jScrlPane.setViewportView(jPanel);

            jTabbedPanePOSTags.addTab(paraPanelName, jScrlPane);
            PanelsArray.add(jPanel);
        }

        jPanel.add(paraTB);
    }

    private javax.swing.JPanel FindPOSTagsPanel(String paraPanelName) {
        javax.swing.JPanel result = null;

        for (javax.swing.JPanel jp : PanelsArray) {
            if (jp.getName().equalsIgnoreCase(paraPanelName)) {
                result = jp;
            }
        }

        return result;
    }

    private void CMDNextSentenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMDNextSentenceActionPerformed

        try {
            dacSentence.SaveRecord(CaptureScreenDisplayedSentenceRecord());
            DisplaySentenceRecord(dacSentence.MoveRecord(EnumRecordMovementDirection.Next));
            RefreshSentenceConceptResultSet();
        } catch (Exception ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CMDNextSentenceActionPerformed

    private void CMDPreviousSentenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMDPreviousSentenceActionPerformed

        try {
            dacSentence.SaveRecord(CaptureScreenDisplayedSentenceRecord());
            DisplaySentenceRecord(dacSentence.MoveRecord(EnumRecordMovementDirection.Previous));
            RefreshSentenceConceptResultSet();
        } catch (Exception ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CMDPreviousSentenceActionPerformed

    private void CMDLastSentenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMDLastSentenceActionPerformed
        try {
            dacSentence.SaveRecord(CaptureScreenDisplayedSentenceRecord());
            DisplaySentenceRecord(dacSentence.MoveRecord(EnumRecordMovementDirection.Last));
            RefreshSentenceConceptResultSet();
        } catch (Exception ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CMDLastSentenceActionPerformed

    private void CMDFirstSentenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMDFirstSentenceActionPerformed
        try {
            dacSentence.SaveRecord(CaptureScreenDisplayedSentenceRecord());
            DisplaySentenceRecord(dacSentence.MoveRecord(EnumRecordMovementDirection.First));
            RefreshSentenceConceptResultSet();
        } catch (Exception ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CMDFirstSentenceActionPerformed

    private void CMDFirstSCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMDFirstSCActionPerformed

        try {
            //Save the record if there is valid data
            if (SentenceConceptDataIsValid()) {
                dacSentenceConcept.SaveRecord(CaptureScreenDisplayedSCRecord());
            }
            DisplaySentenceConceptRecord(dacSentenceConcept.MoveRecord(EnumRecordMovementDirection.First));
        } catch (Exception ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CMDFirstSCActionPerformed

    private void CMDLastSCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMDLastSCActionPerformed
        try {
            //Save the record if there is valid data
            if (SentenceConceptDataIsValid()) {
                dacSentenceConcept.SaveRecord(CaptureScreenDisplayedSCRecord());
            }
            DisplaySentenceConceptRecord(dacSentenceConcept.MoveRecord(EnumRecordMovementDirection.Last));
        } catch (Exception ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CMDLastSCActionPerformed

    private void CMDPreviousSCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMDPreviousSCActionPerformed

        try {
            //Save the record if there is valid data
            if (SentenceConceptDataIsValid()) {
                dacSentenceConcept.SaveRecord(CaptureScreenDisplayedSCRecord());
            }
            DisplaySentenceConceptRecord(dacSentenceConcept.MoveRecord(EnumRecordMovementDirection.Previous));
        } catch (Exception ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CMDPreviousSCActionPerformed

    private void CMDNextSCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMDNextSCActionPerformed

        try {
            //Save the record if there is valid data
            if (SentenceConceptDataIsValid()) {
                dacSentenceConcept.SaveRecord(CaptureScreenDisplayedSCRecord());
            }
            DisplaySentenceConceptRecord(dacSentenceConcept.MoveRecord(EnumRecordMovementDirection.Next));
        } catch (Exception ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CMDNextSCActionPerformed

    private void CmdLoadOntologyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdLoadOntologyActionPerformed
        jFileChooser.setCurrentDirectory(new File("D:\\Google Drive\\University\\Thesis\\PHD Research\\My Ontologies\\"));
        int returnVal = jFileChooser.showOpenDialog(this);

        if (JFileChooser.APPROVE_OPTION == returnVal) {

            jLabelOntologyStatus.setText("Ontology Selected: " + jFileChooser.getSelectedFile().getAbsolutePath());
            jLabelOntologyStatus.setForeground(Color.BLACK);

            PopulateOWLConceptsLists(jFileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_CmdLoadOntologyActionPerformed

    private void CmdCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdCloseActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_CmdCloseActionPerformed

    private void CmdRefreshDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdRefreshDBActionPerformed
        try {
            if (dacSentence != null) {
                dacSentence.Dispose();
            }
            if (dacSentenceConcept != null) {
                dacSentenceConcept.Dispose();
            }

            dacSentence = new DACSentence();
            dacSentence.InitializeRowSet();

            DisplaySentenceRecord(dacSentence.GetCurrentRecord());

            dacSentenceConcept = new DACSentenceConcept();

            RefreshSentenceConceptResultSet();
            ResetToggleButtons();
        } catch (ClassNotFoundException | SQLException ex) {
            javax.swing.JOptionPane.showMessageDialog(null, ex.toString());
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(null, ex.toString());
        }
    }//GEN-LAST:event_CmdRefreshDBActionPerformed

    private void jTableConceptExtractionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableConceptExtractionMouseClicked
        try {
            ChangeConceptArgumentsSettings();
        } catch (Exception ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTableConceptExtractionMouseClicked

    private void jTextArgument1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArgument1MouseClicked
//        try {
//            jTextArgument1.setText((String) clipBoard.getData(DataFlavor.stringFlavor));
//        } catch (UnsupportedFlavorException | IOException ex) {
//                                     Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_jTextArgument1MouseClicked

    private void jTextArgument2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArgument2MouseClicked
//           try {
//            jTextArgument2.setText((String) clipBoard.getData(DataFlavor.stringFlavor));
//        } catch (UnsupportedFlavorException | IOException ex) {
//                                     Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_jTextArgument2MouseClicked

    private void jTextAreaSentenceExpandedPOSCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextAreaSentenceExpandedPOSCaretUpdate
        UpdateCaret(evt);
    }//GEN-LAST:event_jTextAreaSentenceExpandedPOSCaretUpdate

    private void jTableOWLAnnotationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableOWLAnnotationMouseClicked
        ToggleButtonClicked();
    }//GEN-LAST:event_jTableOWLAnnotationMouseClicked

    private void jTextAreaSentenceOWLPOSCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextAreaSentenceOWLPOSCaretUpdate
        UpdateCaret(evt);
    }//GEN-LAST:event_jTextAreaSentenceOWLPOSCaretUpdate

    private void CmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdSaveActionPerformed
        try {
            dacSentence.SaveRecord(CaptureScreenDisplayedSentenceRecord());
        } catch (SQLException ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CmdSaveActionPerformed

    private void CmdAddTreeChildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdAddTreeChildActionPerformed
        DefaultTreeModel model = (DefaultTreeModel) jTreePOSTags.getModel();

        DefaultMutableTreeNode selectedNode
                = (DefaultMutableTreeNode) jTreePOSTags.getLastSelectedPathComponent();

        if (selectedNode == null) {
            return;
        }

        selectedNode.add(new DefaultMutableTreeNode("(Select Toggle Bottons)"));
        model.reload(selectedNode);
    }//GEN-LAST:event_CmdAddTreeChildActionPerformed

    private void jTreePOSTagsValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreePOSTagsValueChanged
        try {
            DefaultMutableTreeNode selectedNode
                    = (DefaultMutableTreeNode) jTreePOSTags.getLastSelectedPathComponent();

            if (selectedNode == null) {
                return;
            }

            ResetToggleButtons();
            if (selectedNode.getLevel() > 1) {
                ToggleButtonsBasedOnSelection();
            }

        } catch (Exception ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTreePOSTagsValueChanged

    private void CmdDeleteTreeChildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdDeleteTreeChildActionPerformed
        DefaultTreeModel model = (DefaultTreeModel) jTreePOSTags.getModel();

        DefaultMutableTreeNode selectedNode
                = (DefaultMutableTreeNode) jTreePOSTags.getLastSelectedPathComponent();

        if (selectedNode == null) {
            return;
        }

        DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) selectedNode.getParent();
        parentNode.remove(selectedNode);
        model.reload(parentNode);

        jTextAreaSentenceExpandedPOS.setText(TreeToString());
    }//GEN-LAST:event_CmdDeleteTreeChildActionPerformed

    private void CmdRevertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdRevertActionPerformed
        try {
            if (ActiveTextArea == jTextAreaSentenceExpandedPOS) {
                jTextAreaSentenceExpandedPOS.setText(dacSentence.GetCurrentRecord().getSentenceExpandedPos());
            }
            if (ActiveTextArea == jTextAreaSentenceOWLPOS) {
                jTextAreaSentenceOWLPOS.setText(dacSentence.GetCurrentRecord().getSentenceOwlPos());
            }

            StringToTree(dacSentence.GetCurrentRecord().getSentenceText(), dacSentence.GetCurrentRecord().getSentenceExpandedPos());
        } catch (SQLException ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CmdRevertActionPerformed

    private void DisplaySentenceRecord(Sentence paraSentence) throws Exception {

        LblId.setText("Record Id: " + Integer.toString(paraSentence.getId()));
        LblStoryId.setText("Story Id: " + Integer.toString(paraSentence.getStoryId()));
        LblLineNumber.setText("Line Number : " + Integer.toString(paraSentence.getLineNumber()));
        jTextAreaSentenceExpandedPOS.setText(paraSentence.getSentenceExpandedPos());
        jTextAreaSentenceOWLPOS.setText(paraSentence.getSentenceOwlPos());
        jTextParseTree.setText(paraSentence.getParseTree());
        jTextCorrectedParseTree.setText(paraSentence.getCorrectedParseTree());

        StringToTree(paraSentence.getSentenceText(), paraSentence.getSentenceExpandedPos());
    }

    private void DisplaySentenceConceptRecord(SentenceConcept paraSentenceConcept) throws Exception {

        jTextSCId.setText(Integer.toString(paraSentenceConcept.getId()));
        jTextSCSentenceId.setText(Integer.toString(paraSentenceConcept.getSentenceId()));
        jTextConceptSequenceNumber.setText(Integer.toString(paraSentenceConcept.getConceptSequenceNumber()));
        SelectjTableConceptsListConceptExtractiontRow(paraSentenceConcept.getConceptId());
        jTextPatternId.setText(Integer.toString(paraSentenceConcept.getConceptPatternId()));
        jTextArgument1.setText(paraSentenceConcept.getArgument1());
        jTextArgument2.setText(paraSentenceConcept.getArgument2());
        jLabelArgument1.setText(paraSentenceConcept.getArgument1ConceptId());
        jLabelArgument2.setText(paraSentenceConcept.getArgument2ConceptId());
        jCheckBoxImplicit.setSelected(paraSentenceConcept.getImplicit());
        CBConceptCompositeLevelId.setSelectedItem(paraSentenceConcept.getConceptCompositeLevel());
        jCheckBoxNegation.setSelected(paraSentenceConcept.getNegation());
        jTANote.setText(paraSentenceConcept.getNote());

    }

    private Sentence CaptureScreenDisplayedSentenceRecord() throws SQLException {

        Sentence sentenceRecord = new Sentence();

        //although we are capturing the read only values for clarity, these values are not
        //used during the save record phase later, they are explicitly skipped
        //this value is read only, therefore get the original value from current record
        sentenceRecord.setId(dacSentence.GetCurrentRecord().getId());
        //this value is read only, therefore get the original value from current record
        sentenceRecord.setStoryId(dacSentence.GetCurrentRecord().getStoryId());
        //this value is read only, therefore get the original value from current record
        sentenceRecord.setLineNumber(dacSentence.GetCurrentRecord().getLineNumber());
        //this value is read only, therefore get the original value from current record

        sentenceRecord.setSentenceText(dacSentence.GetCurrentRecord().getSentenceText());
        sentenceRecord.setSentenceExpandedPos(jTextAreaSentenceExpandedPOS.getText());
        sentenceRecord.setSentenceOwlPos(jTextAreaSentenceOWLPOS.getText());
        sentenceRecord.setParseTree(jTextParseTree.getText());
        sentenceRecord.setCorrectedParseTree(jTextCorrectedParseTree.getText());

        return sentenceRecord;
    }

    private SentenceConcept CaptureScreenDisplayedSCRecord() throws Exception {
        SentenceConcept sentenceConceptRecord = new SentenceConcept();

        sentenceConceptRecord.setId(Integer.parseInt(jTextSCId.getText()));
        sentenceConceptRecord.setSentenceId(Integer.parseInt(jTextSCSentenceId.getText()));
        sentenceConceptRecord.setConceptSequenceNumber(Integer.parseInt(jTextConceptSequenceNumber.getText()));
        sentenceConceptRecord.setConceptId(dataModelConceptsListConceptExtraction.getValueAt(jTableConceptExtraction.getSelectedRow(), 0).toString());
        sentenceConceptRecord.setConceptPatternId(Integer.parseInt(jTextPatternId.getText()));
        sentenceConceptRecord.setArgument1(jTextArgument1.getText());
        sentenceConceptRecord.setArgument1ConceptId(jLabelArgument1.getText());
        sentenceConceptRecord.setArgument2(jTextArgument2.getText());
        sentenceConceptRecord.setArgument2ConceptId(jLabelArgument2.getText());
        sentenceConceptRecord.setImplicit(jCheckBoxImplicit.isSelected());
        sentenceConceptRecord.setConceptCompositeLevel(CBConceptCompositeLevelId.getSelectedItem().toString());
        sentenceConceptRecord.setNegation(jCheckBoxNegation.isSelected());
        sentenceConceptRecord.setNote(jTANote.getText());

        return sentenceConceptRecord;
    }

    private void RefreshSentenceConceptResultSet() throws SQLException {
        try {
            //Everytime a new Sentence is displayed, we need to refresh the SentenceConcepts
            //Save the record if there is valid data
            if (SentenceConceptDataIsValid()) {
                dacSentenceConcept.SaveRecord(CaptureScreenDisplayedSCRecord());
            }

            dacSentenceConcept.InitializeRowSet(dacSentence.GetCurrentRecord().getId());
            DisplaySentenceConceptRecord(dacSentenceConcept.GetRecord());
        } catch (Exception ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void PopulateOWLConceptsLists(String paraOntologyFilePath) {

        try {
            ReCreateTablesDTMModels();

            OntologyInterface ontologyInterface;
            ontologyInterface = new OntologyInterface(paraOntologyFilePath);
            List<CapturedConceptStructure> resultList = ontologyInterface.ParseOntology();

            Collections.sort(resultList, (CapturedConceptStructure s1, CapturedConceptStructure s2) -> {
                return s1.ConceptId.compareToIgnoreCase(s2.ConceptId);
            });

            //Populate Concept Extraction Data Model
            for (int ii = 0; ii < resultList.size(); ii++) {
                Object[] data = {resultList.get(ii).ConceptId,
                    resultList.get(ii).Category,
                    resultList.get(ii).ArgumentOneClass,
                    resultList.get(ii).ArgumentTwoClass,
                    resultList.get(ii).ParentClass};

                dataModelConceptsListConceptExtraction.addRow(data);
            }

            //Populate Semantic Annotation Data Model
            for (int ii = 0; ii < resultList.size(); ii++) {
                if (resultList.get(ii).Category.equalsIgnoreCase("Unary")) {
                    Object[] data = {resultList.get(ii).ConceptId};
                    dataModelConceptsListOWLAnnotation.addRow(data);
                }
            }

            jTableConceptExtraction.setModel(dataModelConceptsListConceptExtraction);
            jTableOWLAnnotation.setModel(dataModelConceptsListOWLAnnotation);

        } catch (OWLOntologyCreationException ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void ReCreateTablesDTMModels() throws Exception {
        if (dataModelConceptsListConceptExtraction != null) {
            dataModelConceptsListConceptExtraction = null;
        }

        dataModelConceptsListConceptExtraction = new DefaultTableModel();
        dataModelConceptsListConceptExtraction.addColumn("Concept Id");
        dataModelConceptsListConceptExtraction.addColumn("Category");
        dataModelConceptsListConceptExtraction.addColumn("Arg 1 Class");
        dataModelConceptsListConceptExtraction.addColumn("Arg 2 Class");
        dataModelConceptsListConceptExtraction.addColumn("Parent Class");

        if (dataModelConceptsListOWLAnnotation != null) {
            dataModelConceptsListOWLAnnotation = null;
        }

        dataModelConceptsListOWLAnnotation = new DefaultTableModel();
        dataModelConceptsListOWLAnnotation.addColumn("Concept Id");
    }

    private void ChangeConceptArgumentsSettings() throws Exception {
        switch (dataModelConceptsListConceptExtraction.getValueAt(jTableConceptExtraction.getSelectedRow(), 1).toString()) {
            case ConceptCategoryDefinition.ClassLabel:
                jLabelArgument1.setText(dataModelConceptsListConceptExtraction.getValueAt(jTableConceptExtraction.getSelectedRow(), 0).toString());
                jLabelArgument2.setText("");
                jTextArgument2.setEnabled(false);
                break;
            case ConceptCategoryDefinition.ObjectCategoryLabel:
                jLabelArgument1.setText("Argument 1");
                jLabelArgument2.setText("Argument 2");

                jTextArgument2.setEnabled(true);

                if (dataModelConceptsListConceptExtraction.getValueAt(jTableConceptExtraction.getSelectedRow(), 2) != null) {
                    jLabelArgument1.setText(dataModelConceptsListConceptExtraction.getValueAt(jTableConceptExtraction.getSelectedRow(), 2).toString());
                }

                if (dataModelConceptsListConceptExtraction.getValueAt(jTableConceptExtraction.getSelectedRow(), 3) != null) {
                    jLabelArgument2.setText(dataModelConceptsListConceptExtraction.getValueAt(jTableConceptExtraction.getSelectedRow(), 3).toString());
                }
                break;
        }
    }

    private boolean SentenceConceptDataIsValid() throws Exception {
        return jTableConceptExtraction.getSelectedRow() != -1;
    }

    private void SelectjTableConceptsListConceptExtractiontRow(String paraString) throws Exception {
        jTableConceptExtraction.clearSelection();
        jLabelSelectedConcept.setText(paraString);

        if (dataModelConceptsListConceptExtraction == null) {
            return;
        }

        for (int i = 0; i < dataModelConceptsListConceptExtraction.getRowCount(); i++) {
            // 0 is for the column Part number
            if (dataModelConceptsListConceptExtraction.getValueAt(i, 0).toString().equalsIgnoreCase(paraString)) {
                jTableConceptExtraction.setRowSelectionInterval(i, i);
                jLabelSelectedConcept.setText(paraString);

                jTableConceptExtraction.scrollRectToVisible(new Rectangle(jTableConceptExtraction.getCellRect(i, 0, true)));
                ChangeConceptArgumentsSettings();
                break;
            }
        }
    }

    private void SelectjTableOWLRow(String paraOWLConceptName) throws Exception {

        if (dataModelConceptsListOWLAnnotation == null) {
            return;
        }

        jTableOWLAnnotation.clearSelection();

        for (int i = 0; i < dataModelConceptsListOWLAnnotation.getRowCount(); i++) {
            // 0 is for the column Part number
            if (dataModelConceptsListOWLAnnotation.getValueAt(i, 0).toString().equalsIgnoreCase(paraOWLConceptName)) {
                jTableOWLAnnotation.setRowSelectionInterval(i, i);

                jTableOWLAnnotation.scrollRectToVisible(new Rectangle(jTableOWLAnnotation.getCellRect(i, 0, true)));
                break;
            }
        }
    }

    public void UpdateCaret(CaretEvent evt) {
        try {
            ActiveTextArea = (javax.swing.JTextArea) evt.getSource();
            int cursorPosition = evt.getDot();

            //this code skips this procedure when run during form initialization
            if (cursorPosition == ActiveTextArea.getText().length()) {
                return;
            }

            //we need to get the tokenId under cursor
            //to do that, we shall find the beginning of the current item then extract its number
            int selectionStartPosition = -1;

            char[] charArray = ActiveTextArea.getText().toCharArray();
            for (int i = cursorPosition; i >= 0; i--) {
                if (((int) (charArray[cursorPosition - (cursorPosition - i)]) == 32)
                        || (i == 0)) {
                    if (i == 0) {
                        //Just return the current i index
                        selectionStartPosition = i;
                        break;
                    } else {
                        //if not the first token, then add 1 to compensate for the space after the token
                        //because the begining of this token shall be right after the space character
                        selectionStartPosition = i + 1;
                        break;
                    }
                }
            }

            int tokenId = Integer.valueOf(ActiveTextArea.getText().substring(selectionStartPosition, ActiveTextArea.getText().indexOf(":", selectionStartPosition)));

            //now set the Jtree to the current token id
            DefaultTreeModel model = (DefaultTreeModel) jTreePOSTags.getModel();
            DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();

            TreePath path = new TreePath(model.getPathToRoot(root.getChildAt(tokenId)));
            jTreePOSTags.setSelectionPath(path);
            jTreePOSTags.scrollPathToVisible(path);
        } catch (Exception ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void ResetToggleButtons() throws Exception {
        for (javax.swing.JToggleButton tb : ToggleButtonsArray) {
            tb.setSelected(false);
        }
        //also clear the table if any rows are selected
        jTableOWLAnnotation.clearSelection();
    }

    private void ToggleButtonClicked() {

        try {
            //get the current selected node - a subnode from a token node
            DefaultMutableTreeNode selectedNode
                    = (DefaultMutableTreeNode) jTreePOSTags.getLastSelectedPathComponent();

            StringBuilder sb = new StringBuilder();

            //get current tree node
            DefaultTreeModel model = (DefaultTreeModel) jTreePOSTags.getModel();

            //iterate through all buttons and update string based on toggle buttons state
            for (javax.swing.JToggleButton tb : ToggleButtonsArray) {
                if (tb.isSelected()) {
                    if (sb.length() > 0) {
                        sb.append("+");
                    }
                    sb = sb.append(tb.getName());
                }
            }

            sb.insert(0, "{");
            sb.insert(sb.length(), "}");

            selectedNode.setUserObject(sb.toString());
            model.nodeChanged(selectedNode);

            jTextAreaSentenceExpandedPOS.setText(TreeToString());

        } catch (Exception ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

//    private String GetsentenceTextFromJTree() {
//        String str = null;
//
//        DefaultTreeModel model = (DefaultTreeModel) jTreePOSTags.getModel();
//        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
//
//        Enumeration e = root.preorderEnumeration();
//        while (e.hasMoreElements()) {
//            DefaultMutableTreeNode child = (DefaultMutableTreeNode) e.nextElement();
//            str = str + child.toString() + " ";
//        }
//
//        str = str.trim();//remove the last space
//        return str;
//    }
    protected String RecursiveTreeParse(DefaultTreeModel model, Object o) {
        String str = "";
        int count = model.getChildCount(o);
        for (int i = 0; i < count; i++) {
            DefaultMutableTreeNode child = (DefaultMutableTreeNode) model.getChild(o, i);
            if (model.isLeaf(child)) {
                str = str + child.toString();
            } else if (child.getLevel() == 1) {
                String s;
                s = Utility.Globals.StripNonDigits(child.toString());
                s = s + ":";

                String filler = "";//set string to empty string not null or else null will be explicitly placed in string
                if (str.length() > 0) {
                    filler = " ";
                }

                str = str + filler + s + "(" + RecursiveTreeParse(model, child) + ")";
            } else {
                str = str + child.toString() + "(" + RecursiveTreeParse(model, child) + ")";
            }
        }
        return str;
    }

    private void StringToTree(String paraSentence, String paraPOS) {
        try {
            jTreePOSTags.removeAll();
            jTreePOSTags.setModel(null);

            DefaultMutableTreeNode root = new DefaultMutableTreeNode("Sentence");
            DefaultMutableTreeNode childNode;

            String[] wordsArray = paraSentence.split(" ");
            String[] posArray = paraPOS.split(" ");

            for (int i = 0; i < wordsArray.length; i++) {
                childNode = new DefaultMutableTreeNode(wordsArray[i]);
                root.add(childNode);

                String posTagStr = posArray[i].substring(posArray[i].indexOf(":") + 1, posArray[i].toString().length());

                Stack<DefaultMutableTreeNode> stack = new Stack<>();
                DefaultMutableTreeNode activeParentNode = childNode;

                DefaultMutableTreeNode cn = null;
                for (int ii = 0; ii < posTagStr.length(); ii++) {
                    switch (posTagStr.charAt(ii)) {
                        case 40://openning bracket (                                                        
                            if (cn != null)//not the first bracket
                            {
                                stack.push(activeParentNode);
                                activeParentNode = cn;
                            }
                            break;
                        case 41:
                            if (stack.size() > 0) {
                                activeParentNode = stack.pop();
                            }
                            break;
                        case 123:
                            cn = new DefaultMutableTreeNode("");
                            activeParentNode.add(cn);
                            cn.setUserObject(cn.getUserObject() + String.valueOf(posTagStr.charAt(ii)));
                            break;
                        default:
                            cn.setUserObject(cn.getUserObject() + String.valueOf(posTagStr.charAt(ii)));
                            break;
                    }
                }
            }

            DefaultTreeModel model = new DefaultTreeModel(root);
            jTreePOSTags.setModel(model);
        } catch (Exception ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String TreeToString() {
        DefaultTreeModel model = (DefaultTreeModel) jTreePOSTags.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();

        //enable the following sentence and disable all the other
        //if you want to experiment with recursive, but things can 
        //get complicated in tagging and annotating
        return RecursiveTreeParse(model, root);

//        String str = "";
//
//        Enumeration e = root.preorderEnumeration();
//        //this is an iterative sequential mechnisn vs recursive
//        //iterate through all nodes in the tree and build token pos taggings accordingly
//        //
//        while (e.hasMoreElements()) {
//            DefaultMutableTreeNode child = (DefaultMutableTreeNode) e.nextElement();
//            //if this is a level one token, then extract the token id
//            if (child.getLevel() == 1) {
//                String tokenId = Utility.TextStripper.StripNonDigits(child.toString());
//                String filler = "";//set string to empty string not null or else null will be explicitly placed in string
//
//                //if this token is not the first one, then there shall be a pre-string
//                //therefore, append a spacebefore the new token
//                if (str.length() > 0) {
//                    filler = " ";
//                }
//
//                str = str + filler + tokenId + ":";
//            } 
//            //if this is a token below the first level, then just add it to the resulting full string
//            else if (child.getLevel() > 1) {
//                str = str + child.toString();
//            }
//        }
//
//        return str;
    }

    private void ToggleButtonsBasedOnSelection() throws Exception {
        DefaultMutableTreeNode selectedNode
                = (DefaultMutableTreeNode) jTreePOSTags.getLastSelectedPathComponent();
        for (javax.swing.JToggleButton tb : ToggleButtonsArray) {
            if (selectedNode.toString().contains(tb.getName())) {
                tb.setSelected(true);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new POSandRelationsAnnotationFrm().setVisible(true);

                } catch (OWLOntologyStorageException | OWLOntologyCreationException | ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(POSandRelationsAnnotationFrm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CBConceptCompositeLevelId;
    private javax.swing.JButton CMDFirstSC;
    private javax.swing.JButton CMDFirstSentence;
    private javax.swing.JButton CMDLastSC;
    private javax.swing.JButton CMDLastSentence;
    private javax.swing.JButton CMDNextSC;
    private javax.swing.JButton CMDNextSentence;
    private javax.swing.JButton CMDPreviousSC;
    private javax.swing.JButton CMDPreviousSentence;
    private javax.swing.JButton CmdAddTreeChild;
    private javax.swing.JButton CmdClose;
    private javax.swing.JButton CmdDeleteTreeChild;
    private javax.swing.JButton CmdLoadOntology;
    private javax.swing.JButton CmdRefreshDB;
    private javax.swing.JButton CmdRevert;
    private javax.swing.JButton CmdSave;
    private javax.swing.JLabel LblId;
    private javax.swing.JLabel LblLineNumber;
    private javax.swing.JLabel LblStoryId;
    private javax.swing.JCheckBox jCheckBoxImplicit;
    private javax.swing.JCheckBox jCheckBoxNegation;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelArgument1;
    private javax.swing.JLabel jLabelArgument2;
    private javax.swing.JLabel jLabelOntologyStatus;
    private javax.swing.JLabel jLabelSelectedConcept;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelOWLTags;
    private javax.swing.JPanel jPanelParseTrees;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTextArea jTANote;
    private javax.swing.JTabbedPane jTabbedPanePOSTags;
    private javax.swing.JTabbedPane jTabbedPaneSentences;
    private javax.swing.JTable jTableConceptExtraction;
    private javax.swing.JTable jTableOWLAnnotation;
    private javax.swing.JTextArea jTextAreaSentenceExpandedPOS;
    private javax.swing.JTextArea jTextAreaSentenceOWLPOS;
    private javax.swing.JTextField jTextArgument1;
    private javax.swing.JTextField jTextArgument2;
    private javax.swing.JTextField jTextConceptSequenceNumber;
    private javax.swing.JTextArea jTextCorrectedParseTree;
    private javax.swing.JTextArea jTextParseTree;
    private javax.swing.JTextField jTextPatternId;
    private javax.swing.JTextField jTextSCId;
    private javax.swing.JTextField jTextSCSentenceId;
    private javax.swing.JTree jTreePOSTags;
    // End of variables declaration//GEN-END:variables
}
